
blink_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000113c  080081e4  080081e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009320  08009320  00002320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009344  08009344  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08009344  08009344  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009344  08009344  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009344  08009344  00002344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009348  08009348  00002348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800934c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08009358  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08009358  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a18  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e24  00000000  00000000  00005a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00006878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002b9  00000000  00000000  00006c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001790f  00000000  00000000  00006f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000049ae  00000000  00000000  0001e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f72  00000000  00000000  000231be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad130  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d2c  00000000  00000000  000ad174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000adea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081e4 <__do_global_dtors_aux>:
 80081e4:	b510      	push	{r4, lr}
 80081e6:	4c05      	ldr	r4, [pc, #20]	@ (80081fc <__do_global_dtors_aux+0x18>)
 80081e8:	7823      	ldrb	r3, [r4, #0]
 80081ea:	b933      	cbnz	r3, 80081fa <__do_global_dtors_aux+0x16>
 80081ec:	4b04      	ldr	r3, [pc, #16]	@ (8008200 <__do_global_dtors_aux+0x1c>)
 80081ee:	b113      	cbz	r3, 80081f6 <__do_global_dtors_aux+0x12>
 80081f0:	4804      	ldr	r0, [pc, #16]	@ (8008204 <__do_global_dtors_aux+0x20>)
 80081f2:	f3af 8000 	nop.w
 80081f6:	2301      	movs	r3, #1
 80081f8:	7023      	strb	r3, [r4, #0]
 80081fa:	bd10      	pop	{r4, pc}
 80081fc:	2000000c 	.word	0x2000000c
 8008200:	00000000 	.word	0x00000000
 8008204:	08009308 	.word	0x08009308

08008208 <frame_dummy>:
 8008208:	b508      	push	{r3, lr}
 800820a:	4b03      	ldr	r3, [pc, #12]	@ (8008218 <frame_dummy+0x10>)
 800820c:	b11b      	cbz	r3, 8008216 <frame_dummy+0xe>
 800820e:	4903      	ldr	r1, [pc, #12]	@ (800821c <frame_dummy+0x14>)
 8008210:	4803      	ldr	r0, [pc, #12]	@ (8008220 <frame_dummy+0x18>)
 8008212:	f3af 8000 	nop.w
 8008216:	bd08      	pop	{r3, pc}
 8008218:	00000000 	.word	0x00000000
 800821c:	20000010 	.word	0x20000010
 8008220:	08009308 	.word	0x08009308

08008224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8008228:	b662      	cpsie	i
}
 800822a:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800822c:	f000 f930 	bl	8008490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008230:	f000 f80e 	bl	8008250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008234:	f000 f852 	bl	80082dc <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8008238:	2101      	movs	r1, #1
 800823a:	4804      	ldr	r0, [pc, #16]	@ (800824c <main+0x28>)
 800823c:	f000 fc3e 	bl	8008abc <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8008240:	2064      	movs	r0, #100	@ 0x64
 8008242:	f000 f987 	bl	8008554 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8008246:	bf00      	nop
 8008248:	e7f6      	b.n	8008238 <main+0x14>
 800824a:	bf00      	nop
 800824c:	40010c00 	.word	0x40010c00

08008250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b090      	sub	sp, #64	@ 0x40
 8008254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008256:	f107 0318 	add.w	r3, r7, #24
 800825a:	2228      	movs	r2, #40	@ 0x28
 800825c:	2100      	movs	r1, #0
 800825e:	4618      	mov	r0, r3
 8008260:	f001 f826 	bl	80092b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008264:	1d3b      	adds	r3, r7, #4
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	605a      	str	r2, [r3, #4]
 800826c:	609a      	str	r2, [r3, #8]
 800826e:	60da      	str	r2, [r3, #12]
 8008270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008272:	2301      	movs	r3, #1
 8008274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800827a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800827c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008280:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008282:	2301      	movs	r3, #1
 8008284:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008286:	2302      	movs	r3, #2
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800828a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800828e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008290:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008296:	f107 0318 	add.w	r3, r7, #24
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fc28 	bl	8008af0 <HAL_RCC_OscConfig>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80082a6:	f000 f863 	bl	8008370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082aa:	230f      	movs	r3, #15
 80082ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082ae:	2302      	movs	r3, #2
 80082b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80082b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	2102      	movs	r1, #2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fe95 	bl	8008ff4 <HAL_RCC_ClockConfig>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80082d0:	f000 f84e 	bl	8008370 <Error_Handler>
  }
}
 80082d4:	bf00      	nop
 80082d6:	3740      	adds	r7, #64	@ 0x40
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082e2:	f107 0310 	add.w	r3, r7, #16
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	605a      	str	r2, [r3, #4]
 80082ec:	609a      	str	r2, [r3, #8]
 80082ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008368 <MX_GPIO_Init+0x8c>)
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008368 <MX_GPIO_Init+0x8c>)
 80082f6:	f043 0320 	orr.w	r3, r3, #32
 80082fa:	6193      	str	r3, [r2, #24]
 80082fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008368 <MX_GPIO_Init+0x8c>)
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008308:	4b17      	ldr	r3, [pc, #92]	@ (8008368 <MX_GPIO_Init+0x8c>)
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	4a16      	ldr	r2, [pc, #88]	@ (8008368 <MX_GPIO_Init+0x8c>)
 800830e:	f043 0308 	orr.w	r3, r3, #8
 8008312:	6193      	str	r3, [r2, #24]
 8008314:	4b14      	ldr	r3, [pc, #80]	@ (8008368 <MX_GPIO_Init+0x8c>)
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	60bb      	str	r3, [r7, #8]
 800831e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008320:	4b11      	ldr	r3, [pc, #68]	@ (8008368 <MX_GPIO_Init+0x8c>)
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	4a10      	ldr	r2, [pc, #64]	@ (8008368 <MX_GPIO_Init+0x8c>)
 8008326:	f043 0304 	orr.w	r3, r3, #4
 800832a:	6193      	str	r3, [r2, #24]
 800832c:	4b0e      	ldr	r3, [pc, #56]	@ (8008368 <MX_GPIO_Init+0x8c>)
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	607b      	str	r3, [r7, #4]
 8008336:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8008338:	2200      	movs	r2, #0
 800833a:	2101      	movs	r1, #1
 800833c:	480b      	ldr	r0, [pc, #44]	@ (800836c <MX_GPIO_Init+0x90>)
 800833e:	f000 fba5 	bl	8008a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8008342:	2301      	movs	r3, #1
 8008344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834a:	2300      	movs	r3, #0
 800834c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800834e:	2302      	movs	r3, #2
 8008350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8008352:	f107 0310 	add.w	r3, r7, #16
 8008356:	4619      	mov	r1, r3
 8008358:	4804      	ldr	r0, [pc, #16]	@ (800836c <MX_GPIO_Init+0x90>)
 800835a:	f000 fa03 	bl	8008764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800835e:	bf00      	nop
 8008360:	3720      	adds	r7, #32
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	40021000 	.word	0x40021000
 800836c:	40010c00 	.word	0x40010c00

08008370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008374:	b672      	cpsid	i
}
 8008376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008378:	bf00      	nop
 800837a:	e7fd      	b.n	8008378 <Error_Handler+0x8>

0800837c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008382:	4b15      	ldr	r3, [pc, #84]	@ (80083d8 <HAL_MspInit+0x5c>)
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	4a14      	ldr	r2, [pc, #80]	@ (80083d8 <HAL_MspInit+0x5c>)
 8008388:	f043 0301 	orr.w	r3, r3, #1
 800838c:	6193      	str	r3, [r2, #24]
 800838e:	4b12      	ldr	r3, [pc, #72]	@ (80083d8 <HAL_MspInit+0x5c>)
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	60bb      	str	r3, [r7, #8]
 8008398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800839a:	4b0f      	ldr	r3, [pc, #60]	@ (80083d8 <HAL_MspInit+0x5c>)
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	4a0e      	ldr	r2, [pc, #56]	@ (80083d8 <HAL_MspInit+0x5c>)
 80083a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083a4:	61d3      	str	r3, [r2, #28]
 80083a6:	4b0c      	ldr	r3, [pc, #48]	@ (80083d8 <HAL_MspInit+0x5c>)
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083ae:	607b      	str	r3, [r7, #4]
 80083b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80083b2:	4b0a      	ldr	r3, [pc, #40]	@ (80083dc <HAL_MspInit+0x60>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	4a04      	ldr	r2, [pc, #16]	@ (80083dc <HAL_MspInit+0x60>)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc80      	pop	{r7}
 80083d6:	4770      	bx	lr
 80083d8:	40021000 	.word	0x40021000
 80083dc:	40010000 	.word	0x40010000

080083e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <NMI_Handler+0x4>

080083e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <HardFault_Handler+0x4>

080083f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083f4:	bf00      	nop
 80083f6:	e7fd      	b.n	80083f4 <MemManage_Handler+0x4>

080083f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083fc:	bf00      	nop
 80083fe:	e7fd      	b.n	80083fc <BusFault_Handler+0x4>

08008400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008400:	b480      	push	{r7}
 8008402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008404:	bf00      	nop
 8008406:	e7fd      	b.n	8008404 <UsageFault_Handler+0x4>

08008408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800840c:	bf00      	nop
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr

08008414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008418:	bf00      	nop
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr

08008420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008420:	b480      	push	{r7}
 8008422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008424:	bf00      	nop
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr

0800842c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008430:	f000 f874 	bl	800851c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008434:	bf00      	nop
 8008436:	bd80      	pop	{r7, pc}

08008438 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800843c:	bf00      	nop
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr

08008444 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008444:	f7ff fff8 	bl	8008438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008448:	480b      	ldr	r0, [pc, #44]	@ (8008478 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800844a:	490c      	ldr	r1, [pc, #48]	@ (800847c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800844c:	4a0c      	ldr	r2, [pc, #48]	@ (8008480 <LoopFillZerobss+0x16>)
  movs r3, #0
 800844e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008450:	e002      	b.n	8008458 <LoopCopyDataInit>

08008452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008456:	3304      	adds	r3, #4

08008458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800845a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800845c:	d3f9      	bcc.n	8008452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800845e:	4a09      	ldr	r2, [pc, #36]	@ (8008484 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008460:	4c09      	ldr	r4, [pc, #36]	@ (8008488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008464:	e001      	b.n	800846a <LoopFillZerobss>

08008466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008468:	3204      	adds	r2, #4

0800846a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800846a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800846c:	d3fb      	bcc.n	8008466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800846e:	f000 ff27 	bl	80092c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008472:	f7ff fed7 	bl	8008224 <main>
  bx lr
 8008476:	4770      	bx	lr
  ldr r0, =_sdata
 8008478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800847c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008480:	0800934c 	.word	0x0800934c
  ldr r2, =_sbss
 8008484:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008488:	2000002c 	.word	0x2000002c

0800848c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800848c:	e7fe      	b.n	800848c <ADC1_2_IRQHandler>
	...

08008490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008494:	4b08      	ldr	r3, [pc, #32]	@ (80084b8 <HAL_Init+0x28>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a07      	ldr	r2, [pc, #28]	@ (80084b8 <HAL_Init+0x28>)
 800849a:	f043 0310 	orr.w	r3, r3, #16
 800849e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084a0:	2003      	movs	r0, #3
 80084a2:	f000 f92b 	bl	80086fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80084a6:	200f      	movs	r0, #15
 80084a8:	f000 f808 	bl	80084bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80084ac:	f7ff ff66 	bl	800837c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	40022000 	.word	0x40022000

080084bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084c4:	4b12      	ldr	r3, [pc, #72]	@ (8008510 <HAL_InitTick+0x54>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	4b12      	ldr	r3, [pc, #72]	@ (8008514 <HAL_InitTick+0x58>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	4619      	mov	r1, r3
 80084ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80084d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80084d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 f935 	bl	800874a <HAL_SYSTICK_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e00e      	b.n	8008508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b0f      	cmp	r3, #15
 80084ee:	d80a      	bhi.n	8008506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084f0:	2200      	movs	r2, #0
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	f000 f90b 	bl	8008712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084fc:	4a06      	ldr	r2, [pc, #24]	@ (8008518 <HAL_InitTick+0x5c>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	e000      	b.n	8008508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
}
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	20000000 	.word	0x20000000
 8008514:	20000008 	.word	0x20000008
 8008518:	20000004 	.word	0x20000004

0800851c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008520:	4b05      	ldr	r3, [pc, #20]	@ (8008538 <HAL_IncTick+0x1c>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	4b05      	ldr	r3, [pc, #20]	@ (800853c <HAL_IncTick+0x20>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4413      	add	r3, r2
 800852c:	4a03      	ldr	r2, [pc, #12]	@ (800853c <HAL_IncTick+0x20>)
 800852e:	6013      	str	r3, [r2, #0]
}
 8008530:	bf00      	nop
 8008532:	46bd      	mov	sp, r7
 8008534:	bc80      	pop	{r7}
 8008536:	4770      	bx	lr
 8008538:	20000008 	.word	0x20000008
 800853c:	20000028 	.word	0x20000028

08008540 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
  return uwTick;
 8008544:	4b02      	ldr	r3, [pc, #8]	@ (8008550 <HAL_GetTick+0x10>)
 8008546:	681b      	ldr	r3, [r3, #0]
}
 8008548:	4618      	mov	r0, r3
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr
 8008550:	20000028 	.word	0x20000028

08008554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800855c:	f7ff fff0 	bl	8008540 <HAL_GetTick>
 8008560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d005      	beq.n	800857a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800856e:	4b0a      	ldr	r3, [pc, #40]	@ (8008598 <HAL_Delay+0x44>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800857a:	bf00      	nop
 800857c:	f7ff ffe0 	bl	8008540 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	429a      	cmp	r2, r3
 800858a:	d8f7      	bhi.n	800857c <HAL_Delay+0x28>
  {
  }
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20000008 	.word	0x20000008

0800859c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085ac:	4b0c      	ldr	r3, [pc, #48]	@ (80085e0 <__NVIC_SetPriorityGrouping+0x44>)
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80085b8:	4013      	ands	r3, r2
 80085ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80085c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085ce:	4a04      	ldr	r2, [pc, #16]	@ (80085e0 <__NVIC_SetPriorityGrouping+0x44>)
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	60d3      	str	r3, [r2, #12]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	e000ed00 	.word	0xe000ed00

080085e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085e8:	4b04      	ldr	r3, [pc, #16]	@ (80085fc <__NVIC_GetPriorityGrouping+0x18>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	0a1b      	lsrs	r3, r3, #8
 80085ee:	f003 0307 	and.w	r3, r3, #7
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	e000ed00 	.word	0xe000ed00

08008600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	6039      	str	r1, [r7, #0]
 800860a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800860c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008610:	2b00      	cmp	r3, #0
 8008612:	db0a      	blt.n	800862a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	b2da      	uxtb	r2, r3
 8008618:	490c      	ldr	r1, [pc, #48]	@ (800864c <__NVIC_SetPriority+0x4c>)
 800861a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800861e:	0112      	lsls	r2, r2, #4
 8008620:	b2d2      	uxtb	r2, r2
 8008622:	440b      	add	r3, r1
 8008624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008628:	e00a      	b.n	8008640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	b2da      	uxtb	r2, r3
 800862e:	4908      	ldr	r1, [pc, #32]	@ (8008650 <__NVIC_SetPriority+0x50>)
 8008630:	79fb      	ldrb	r3, [r7, #7]
 8008632:	f003 030f 	and.w	r3, r3, #15
 8008636:	3b04      	subs	r3, #4
 8008638:	0112      	lsls	r2, r2, #4
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	440b      	add	r3, r1
 800863e:	761a      	strb	r2, [r3, #24]
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	bc80      	pop	{r7}
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	e000e100 	.word	0xe000e100
 8008650:	e000ed00 	.word	0xe000ed00

08008654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008654:	b480      	push	{r7}
 8008656:	b089      	sub	sp, #36	@ 0x24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f1c3 0307 	rsb	r3, r3, #7
 800866e:	2b04      	cmp	r3, #4
 8008670:	bf28      	it	cs
 8008672:	2304      	movcs	r3, #4
 8008674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	3304      	adds	r3, #4
 800867a:	2b06      	cmp	r3, #6
 800867c:	d902      	bls.n	8008684 <NVIC_EncodePriority+0x30>
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	3b03      	subs	r3, #3
 8008682:	e000      	b.n	8008686 <NVIC_EncodePriority+0x32>
 8008684:	2300      	movs	r3, #0
 8008686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008688:	f04f 32ff 	mov.w	r2, #4294967295
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	fa02 f303 	lsl.w	r3, r2, r3
 8008692:	43da      	mvns	r2, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	401a      	ands	r2, r3
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800869c:	f04f 31ff 	mov.w	r1, #4294967295
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	fa01 f303 	lsl.w	r3, r1, r3
 80086a6:	43d9      	mvns	r1, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086ac:	4313      	orrs	r3, r2
         );
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3724      	adds	r7, #36	@ 0x24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bc80      	pop	{r7}
 80086b6:	4770      	bx	lr

080086b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086c8:	d301      	bcc.n	80086ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086ca:	2301      	movs	r3, #1
 80086cc:	e00f      	b.n	80086ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086ce:	4a0a      	ldr	r2, [pc, #40]	@ (80086f8 <SysTick_Config+0x40>)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086d6:	210f      	movs	r1, #15
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	f7ff ff90 	bl	8008600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086e0:	4b05      	ldr	r3, [pc, #20]	@ (80086f8 <SysTick_Config+0x40>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086e6:	4b04      	ldr	r3, [pc, #16]	@ (80086f8 <SysTick_Config+0x40>)
 80086e8:	2207      	movs	r2, #7
 80086ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	e000e010 	.word	0xe000e010

080086fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff49 	bl	800859c <__NVIC_SetPriorityGrouping>
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008712:	b580      	push	{r7, lr}
 8008714:	b086      	sub	sp, #24
 8008716:	af00      	add	r7, sp, #0
 8008718:	4603      	mov	r3, r0
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
 800871e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008720:	2300      	movs	r3, #0
 8008722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008724:	f7ff ff5e 	bl	80085e4 <__NVIC_GetPriorityGrouping>
 8008728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	6978      	ldr	r0, [r7, #20]
 8008730:	f7ff ff90 	bl	8008654 <NVIC_EncodePriority>
 8008734:	4602      	mov	r2, r0
 8008736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800873a:	4611      	mov	r1, r2
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff ff5f 	bl	8008600 <__NVIC_SetPriority>
}
 8008742:	bf00      	nop
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7ff ffb0 	bl	80086b8 <SysTick_Config>
 8008758:	4603      	mov	r3, r0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
	...

08008764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008764:	b480      	push	{r7}
 8008766:	b08b      	sub	sp, #44	@ 0x2c
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800876e:	2300      	movs	r3, #0
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008772:	2300      	movs	r3, #0
 8008774:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008776:	e179      	b.n	8008a6c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008778:	2201      	movs	r2, #1
 800877a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877c:	fa02 f303 	lsl.w	r3, r2, r3
 8008780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69fa      	ldr	r2, [r7, #28]
 8008788:	4013      	ands	r3, r2
 800878a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	429a      	cmp	r2, r3
 8008792:	f040 8168 	bne.w	8008a66 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	4a96      	ldr	r2, [pc, #600]	@ (80089f4 <HAL_GPIO_Init+0x290>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d05e      	beq.n	800885e <HAL_GPIO_Init+0xfa>
 80087a0:	4a94      	ldr	r2, [pc, #592]	@ (80089f4 <HAL_GPIO_Init+0x290>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d875      	bhi.n	8008892 <HAL_GPIO_Init+0x12e>
 80087a6:	4a94      	ldr	r2, [pc, #592]	@ (80089f8 <HAL_GPIO_Init+0x294>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d058      	beq.n	800885e <HAL_GPIO_Init+0xfa>
 80087ac:	4a92      	ldr	r2, [pc, #584]	@ (80089f8 <HAL_GPIO_Init+0x294>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d86f      	bhi.n	8008892 <HAL_GPIO_Init+0x12e>
 80087b2:	4a92      	ldr	r2, [pc, #584]	@ (80089fc <HAL_GPIO_Init+0x298>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d052      	beq.n	800885e <HAL_GPIO_Init+0xfa>
 80087b8:	4a90      	ldr	r2, [pc, #576]	@ (80089fc <HAL_GPIO_Init+0x298>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d869      	bhi.n	8008892 <HAL_GPIO_Init+0x12e>
 80087be:	4a90      	ldr	r2, [pc, #576]	@ (8008a00 <HAL_GPIO_Init+0x29c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d04c      	beq.n	800885e <HAL_GPIO_Init+0xfa>
 80087c4:	4a8e      	ldr	r2, [pc, #568]	@ (8008a00 <HAL_GPIO_Init+0x29c>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d863      	bhi.n	8008892 <HAL_GPIO_Init+0x12e>
 80087ca:	4a8e      	ldr	r2, [pc, #568]	@ (8008a04 <HAL_GPIO_Init+0x2a0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d046      	beq.n	800885e <HAL_GPIO_Init+0xfa>
 80087d0:	4a8c      	ldr	r2, [pc, #560]	@ (8008a04 <HAL_GPIO_Init+0x2a0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d85d      	bhi.n	8008892 <HAL_GPIO_Init+0x12e>
 80087d6:	2b12      	cmp	r3, #18
 80087d8:	d82a      	bhi.n	8008830 <HAL_GPIO_Init+0xcc>
 80087da:	2b12      	cmp	r3, #18
 80087dc:	d859      	bhi.n	8008892 <HAL_GPIO_Init+0x12e>
 80087de:	a201      	add	r2, pc, #4	@ (adr r2, 80087e4 <HAL_GPIO_Init+0x80>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	0800885f 	.word	0x0800885f
 80087e8:	08008839 	.word	0x08008839
 80087ec:	0800884b 	.word	0x0800884b
 80087f0:	0800888d 	.word	0x0800888d
 80087f4:	08008893 	.word	0x08008893
 80087f8:	08008893 	.word	0x08008893
 80087fc:	08008893 	.word	0x08008893
 8008800:	08008893 	.word	0x08008893
 8008804:	08008893 	.word	0x08008893
 8008808:	08008893 	.word	0x08008893
 800880c:	08008893 	.word	0x08008893
 8008810:	08008893 	.word	0x08008893
 8008814:	08008893 	.word	0x08008893
 8008818:	08008893 	.word	0x08008893
 800881c:	08008893 	.word	0x08008893
 8008820:	08008893 	.word	0x08008893
 8008824:	08008893 	.word	0x08008893
 8008828:	08008841 	.word	0x08008841
 800882c:	08008855 	.word	0x08008855
 8008830:	4a75      	ldr	r2, [pc, #468]	@ (8008a08 <HAL_GPIO_Init+0x2a4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d013      	beq.n	800885e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008836:	e02c      	b.n	8008892 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	623b      	str	r3, [r7, #32]
          break;
 800883e:	e029      	b.n	8008894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	3304      	adds	r3, #4
 8008846:	623b      	str	r3, [r7, #32]
          break;
 8008848:	e024      	b.n	8008894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	3308      	adds	r3, #8
 8008850:	623b      	str	r3, [r7, #32]
          break;
 8008852:	e01f      	b.n	8008894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	330c      	adds	r3, #12
 800885a:	623b      	str	r3, [r7, #32]
          break;
 800885c:	e01a      	b.n	8008894 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d102      	bne.n	800886c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008866:	2304      	movs	r3, #4
 8008868:	623b      	str	r3, [r7, #32]
          break;
 800886a:	e013      	b.n	8008894 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d105      	bne.n	8008880 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008874:	2308      	movs	r3, #8
 8008876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	611a      	str	r2, [r3, #16]
          break;
 800887e:	e009      	b.n	8008894 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008880:	2308      	movs	r3, #8
 8008882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	615a      	str	r2, [r3, #20]
          break;
 800888a:	e003      	b.n	8008894 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800888c:	2300      	movs	r3, #0
 800888e:	623b      	str	r3, [r7, #32]
          break;
 8008890:	e000      	b.n	8008894 <HAL_GPIO_Init+0x130>
          break;
 8008892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	2bff      	cmp	r3, #255	@ 0xff
 8008898:	d801      	bhi.n	800889e <HAL_GPIO_Init+0x13a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	e001      	b.n	80088a2 <HAL_GPIO_Init+0x13e>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	3304      	adds	r3, #4
 80088a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	2bff      	cmp	r3, #255	@ 0xff
 80088a8:	d802      	bhi.n	80088b0 <HAL_GPIO_Init+0x14c>
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	e002      	b.n	80088b6 <HAL_GPIO_Init+0x152>
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	3b08      	subs	r3, #8
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	210f      	movs	r1, #15
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	fa01 f303 	lsl.w	r3, r1, r3
 80088c4:	43db      	mvns	r3, r3
 80088c6:	401a      	ands	r2, r3
 80088c8:	6a39      	ldr	r1, [r7, #32]
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	fa01 f303 	lsl.w	r3, r1, r3
 80088d0:	431a      	orrs	r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 80c1 	beq.w	8008a66 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80088e4:	4b49      	ldr	r3, [pc, #292]	@ (8008a0c <HAL_GPIO_Init+0x2a8>)
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	4a48      	ldr	r2, [pc, #288]	@ (8008a0c <HAL_GPIO_Init+0x2a8>)
 80088ea:	f043 0301 	orr.w	r3, r3, #1
 80088ee:	6193      	str	r3, [r2, #24]
 80088f0:	4b46      	ldr	r3, [pc, #280]	@ (8008a0c <HAL_GPIO_Init+0x2a8>)
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	60bb      	str	r3, [r7, #8]
 80088fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80088fc:	4a44      	ldr	r2, [pc, #272]	@ (8008a10 <HAL_GPIO_Init+0x2ac>)
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	089b      	lsrs	r3, r3, #2
 8008902:	3302      	adds	r3, #2
 8008904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008908:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800890a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890c:	f003 0303 	and.w	r3, r3, #3
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	220f      	movs	r2, #15
 8008914:	fa02 f303 	lsl.w	r3, r2, r3
 8008918:	43db      	mvns	r3, r3
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4013      	ands	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a3c      	ldr	r2, [pc, #240]	@ (8008a14 <HAL_GPIO_Init+0x2b0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d01f      	beq.n	8008968 <HAL_GPIO_Init+0x204>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a3b      	ldr	r2, [pc, #236]	@ (8008a18 <HAL_GPIO_Init+0x2b4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d019      	beq.n	8008964 <HAL_GPIO_Init+0x200>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a3a      	ldr	r2, [pc, #232]	@ (8008a1c <HAL_GPIO_Init+0x2b8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d013      	beq.n	8008960 <HAL_GPIO_Init+0x1fc>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a39      	ldr	r2, [pc, #228]	@ (8008a20 <HAL_GPIO_Init+0x2bc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d00d      	beq.n	800895c <HAL_GPIO_Init+0x1f8>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a38      	ldr	r2, [pc, #224]	@ (8008a24 <HAL_GPIO_Init+0x2c0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d007      	beq.n	8008958 <HAL_GPIO_Init+0x1f4>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a37      	ldr	r2, [pc, #220]	@ (8008a28 <HAL_GPIO_Init+0x2c4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d101      	bne.n	8008954 <HAL_GPIO_Init+0x1f0>
 8008950:	2305      	movs	r3, #5
 8008952:	e00a      	b.n	800896a <HAL_GPIO_Init+0x206>
 8008954:	2306      	movs	r3, #6
 8008956:	e008      	b.n	800896a <HAL_GPIO_Init+0x206>
 8008958:	2304      	movs	r3, #4
 800895a:	e006      	b.n	800896a <HAL_GPIO_Init+0x206>
 800895c:	2303      	movs	r3, #3
 800895e:	e004      	b.n	800896a <HAL_GPIO_Init+0x206>
 8008960:	2302      	movs	r3, #2
 8008962:	e002      	b.n	800896a <HAL_GPIO_Init+0x206>
 8008964:	2301      	movs	r3, #1
 8008966:	e000      	b.n	800896a <HAL_GPIO_Init+0x206>
 8008968:	2300      	movs	r3, #0
 800896a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800896c:	f002 0203 	and.w	r2, r2, #3
 8008970:	0092      	lsls	r2, r2, #2
 8008972:	4093      	lsls	r3, r2
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800897a:	4925      	ldr	r1, [pc, #148]	@ (8008a10 <HAL_GPIO_Init+0x2ac>)
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	089b      	lsrs	r3, r3, #2
 8008980:	3302      	adds	r3, #2
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008994:	4b25      	ldr	r3, [pc, #148]	@ (8008a2c <HAL_GPIO_Init+0x2c8>)
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	4924      	ldr	r1, [pc, #144]	@ (8008a2c <HAL_GPIO_Init+0x2c8>)
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	4313      	orrs	r3, r2
 800899e:	608b      	str	r3, [r1, #8]
 80089a0:	e006      	b.n	80089b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80089a2:	4b22      	ldr	r3, [pc, #136]	@ (8008a2c <HAL_GPIO_Init+0x2c8>)
 80089a4:	689a      	ldr	r2, [r3, #8]
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	43db      	mvns	r3, r3
 80089aa:	4920      	ldr	r1, [pc, #128]	@ (8008a2c <HAL_GPIO_Init+0x2c8>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d006      	beq.n	80089ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80089bc:	4b1b      	ldr	r3, [pc, #108]	@ (8008a2c <HAL_GPIO_Init+0x2c8>)
 80089be:	68da      	ldr	r2, [r3, #12]
 80089c0:	491a      	ldr	r1, [pc, #104]	@ (8008a2c <HAL_GPIO_Init+0x2c8>)
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60cb      	str	r3, [r1, #12]
 80089c8:	e006      	b.n	80089d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80089ca:	4b18      	ldr	r3, [pc, #96]	@ (8008a2c <HAL_GPIO_Init+0x2c8>)
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	43db      	mvns	r3, r3
 80089d2:	4916      	ldr	r1, [pc, #88]	@ (8008a2c <HAL_GPIO_Init+0x2c8>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d025      	beq.n	8008a30 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80089e4:	4b11      	ldr	r3, [pc, #68]	@ (8008a2c <HAL_GPIO_Init+0x2c8>)
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	4910      	ldr	r1, [pc, #64]	@ (8008a2c <HAL_GPIO_Init+0x2c8>)
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	604b      	str	r3, [r1, #4]
 80089f0:	e025      	b.n	8008a3e <HAL_GPIO_Init+0x2da>
 80089f2:	bf00      	nop
 80089f4:	10320000 	.word	0x10320000
 80089f8:	10310000 	.word	0x10310000
 80089fc:	10220000 	.word	0x10220000
 8008a00:	10210000 	.word	0x10210000
 8008a04:	10120000 	.word	0x10120000
 8008a08:	10110000 	.word	0x10110000
 8008a0c:	40021000 	.word	0x40021000
 8008a10:	40010000 	.word	0x40010000
 8008a14:	40010800 	.word	0x40010800
 8008a18:	40010c00 	.word	0x40010c00
 8008a1c:	40011000 	.word	0x40011000
 8008a20:	40011400 	.word	0x40011400
 8008a24:	40011800 	.word	0x40011800
 8008a28:	40011c00 	.word	0x40011c00
 8008a2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008a30:	4b15      	ldr	r3, [pc, #84]	@ (8008a88 <HAL_GPIO_Init+0x324>)
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	43db      	mvns	r3, r3
 8008a38:	4913      	ldr	r1, [pc, #76]	@ (8008a88 <HAL_GPIO_Init+0x324>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d006      	beq.n	8008a58 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a88 <HAL_GPIO_Init+0x324>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	490e      	ldr	r1, [pc, #56]	@ (8008a88 <HAL_GPIO_Init+0x324>)
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	600b      	str	r3, [r1, #0]
 8008a56:	e006      	b.n	8008a66 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008a58:	4b0b      	ldr	r3, [pc, #44]	@ (8008a88 <HAL_GPIO_Init+0x324>)
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	43db      	mvns	r3, r3
 8008a60:	4909      	ldr	r1, [pc, #36]	@ (8008a88 <HAL_GPIO_Init+0x324>)
 8008a62:	4013      	ands	r3, r2
 8008a64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a68:	3301      	adds	r3, #1
 8008a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a72:	fa22 f303 	lsr.w	r3, r2, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f47f ae7e 	bne.w	8008778 <HAL_GPIO_Init+0x14>
  }
}
 8008a7c:	bf00      	nop
 8008a7e:	bf00      	nop
 8008a80:	372c      	adds	r7, #44	@ 0x2c
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bc80      	pop	{r7}
 8008a86:	4770      	bx	lr
 8008a88:	40010400 	.word	0x40010400

08008a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	807b      	strh	r3, [r7, #2]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a9c:	787b      	ldrb	r3, [r7, #1]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008aa2:	887a      	ldrh	r2, [r7, #2]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008aa8:	e003      	b.n	8008ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008aaa:	887b      	ldrh	r3, [r7, #2]
 8008aac:	041a      	lsls	r2, r3, #16
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	611a      	str	r2, [r3, #16]
}
 8008ab2:	bf00      	nop
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr

08008abc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ace:	887a      	ldrh	r2, [r7, #2]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	041a      	lsls	r2, r3, #16
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	43d9      	mvns	r1, r3
 8008ada:	887b      	ldrh	r3, [r7, #2]
 8008adc:	400b      	ands	r3, r1
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	611a      	str	r2, [r3, #16]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bc80      	pop	{r7}
 8008aec:	4770      	bx	lr
	...

08008af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e272      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 8087 	beq.w	8008c1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b10:	4b92      	ldr	r3, [pc, #584]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f003 030c 	and.w	r3, r3, #12
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d00c      	beq.n	8008b36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f003 030c 	and.w	r3, r3, #12
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d112      	bne.n	8008b4e <HAL_RCC_OscConfig+0x5e>
 8008b28:	4b8c      	ldr	r3, [pc, #560]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b34:	d10b      	bne.n	8008b4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b36:	4b89      	ldr	r3, [pc, #548]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d06c      	beq.n	8008c1c <HAL_RCC_OscConfig+0x12c>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d168      	bne.n	8008c1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e24c      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b56:	d106      	bne.n	8008b66 <HAL_RCC_OscConfig+0x76>
 8008b58:	4b80      	ldr	r3, [pc, #512]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a7f      	ldr	r2, [pc, #508]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	e02e      	b.n	8008bc4 <HAL_RCC_OscConfig+0xd4>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10c      	bne.n	8008b88 <HAL_RCC_OscConfig+0x98>
 8008b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a7a      	ldr	r2, [pc, #488]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	4b78      	ldr	r3, [pc, #480]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a77      	ldr	r2, [pc, #476]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	e01d      	b.n	8008bc4 <HAL_RCC_OscConfig+0xd4>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b90:	d10c      	bne.n	8008bac <HAL_RCC_OscConfig+0xbc>
 8008b92:	4b72      	ldr	r3, [pc, #456]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a71      	ldr	r2, [pc, #452]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a6e      	ldr	r2, [pc, #440]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	e00b      	b.n	8008bc4 <HAL_RCC_OscConfig+0xd4>
 8008bac:	4b6b      	ldr	r3, [pc, #428]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a6a      	ldr	r2, [pc, #424]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	4b68      	ldr	r3, [pc, #416]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a67      	ldr	r2, [pc, #412]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d013      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bcc:	f7ff fcb8 	bl	8008540 <HAL_GetTick>
 8008bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bd4:	f7ff fcb4 	bl	8008540 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b64      	cmp	r3, #100	@ 0x64
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e200      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008be6:	4b5d      	ldr	r3, [pc, #372]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0f0      	beq.n	8008bd4 <HAL_RCC_OscConfig+0xe4>
 8008bf2:	e014      	b.n	8008c1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf4:	f7ff fca4 	bl	8008540 <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bfc:	f7ff fca0 	bl	8008540 <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b64      	cmp	r3, #100	@ 0x64
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e1ec      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c0e:	4b53      	ldr	r3, [pc, #332]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f0      	bne.n	8008bfc <HAL_RCC_OscConfig+0x10c>
 8008c1a:	e000      	b.n	8008c1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d063      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f003 030c 	and.w	r3, r3, #12
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008c36:	4b49      	ldr	r3, [pc, #292]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f003 030c 	and.w	r3, r3, #12
 8008c3e:	2b08      	cmp	r3, #8
 8008c40:	d11c      	bne.n	8008c7c <HAL_RCC_OscConfig+0x18c>
 8008c42:	4b46      	ldr	r3, [pc, #280]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d116      	bne.n	8008c7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c4e:	4b43      	ldr	r3, [pc, #268]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <HAL_RCC_OscConfig+0x176>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d001      	beq.n	8008c66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e1c0      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c66:	4b3d      	ldr	r3, [pc, #244]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4939      	ldr	r1, [pc, #228]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c7a:	e03a      	b.n	8008cf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d020      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c84:	4b36      	ldr	r3, [pc, #216]	@ (8008d60 <HAL_RCC_OscConfig+0x270>)
 8008c86:	2201      	movs	r2, #1
 8008c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c8a:	f7ff fc59 	bl	8008540 <HAL_GetTick>
 8008c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c92:	f7ff fc55 	bl	8008540 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e1a1      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f0      	beq.n	8008c92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4927      	ldr	r1, [pc, #156]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	e015      	b.n	8008cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cc6:	4b26      	ldr	r3, [pc, #152]	@ (8008d60 <HAL_RCC_OscConfig+0x270>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ccc:	f7ff fc38 	bl	8008540 <HAL_GetTick>
 8008cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cd2:	e008      	b.n	8008ce6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cd4:	f7ff fc34 	bl	8008540 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e180      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1f0      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d03a      	beq.n	8008d74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d019      	beq.n	8008d3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d06:	4b17      	ldr	r3, [pc, #92]	@ (8008d64 <HAL_RCC_OscConfig+0x274>)
 8008d08:	2201      	movs	r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d0c:	f7ff fc18 	bl	8008540 <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d14:	f7ff fc14 	bl	8008540 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e160      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d26:	4b0d      	ldr	r3, [pc, #52]	@ (8008d5c <HAL_RCC_OscConfig+0x26c>)
 8008d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0f0      	beq.n	8008d14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008d32:	2001      	movs	r0, #1
 8008d34:	f000 fa9e 	bl	8009274 <RCC_Delay>
 8008d38:	e01c      	b.n	8008d74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d64 <HAL_RCC_OscConfig+0x274>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d40:	f7ff fbfe 	bl	8008540 <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d46:	e00f      	b.n	8008d68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d48:	f7ff fbfa 	bl	8008540 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d908      	bls.n	8008d68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e146      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
 8008d5a:	bf00      	nop
 8008d5c:	40021000 	.word	0x40021000
 8008d60:	42420000 	.word	0x42420000
 8008d64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d68:	4b92      	ldr	r3, [pc, #584]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e9      	bne.n	8008d48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80a6 	beq.w	8008ece <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d82:	2300      	movs	r3, #0
 8008d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d86:	4b8b      	ldr	r3, [pc, #556]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10d      	bne.n	8008dae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d92:	4b88      	ldr	r3, [pc, #544]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	4a87      	ldr	r2, [pc, #540]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d9c:	61d3      	str	r3, [r2, #28]
 8008d9e:	4b85      	ldr	r3, [pc, #532]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008da6:	60bb      	str	r3, [r7, #8]
 8008da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008daa:	2301      	movs	r3, #1
 8008dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dae:	4b82      	ldr	r3, [pc, #520]	@ (8008fb8 <HAL_RCC_OscConfig+0x4c8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d118      	bne.n	8008dec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dba:	4b7f      	ldr	r3, [pc, #508]	@ (8008fb8 <HAL_RCC_OscConfig+0x4c8>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a7e      	ldr	r2, [pc, #504]	@ (8008fb8 <HAL_RCC_OscConfig+0x4c8>)
 8008dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dc6:	f7ff fbbb 	bl	8008540 <HAL_GetTick>
 8008dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dcc:	e008      	b.n	8008de0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dce:	f7ff fbb7 	bl	8008540 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	2b64      	cmp	r3, #100	@ 0x64
 8008dda:	d901      	bls.n	8008de0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e103      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008de0:	4b75      	ldr	r3, [pc, #468]	@ (8008fb8 <HAL_RCC_OscConfig+0x4c8>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d0f0      	beq.n	8008dce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d106      	bne.n	8008e02 <HAL_RCC_OscConfig+0x312>
 8008df4:	4b6f      	ldr	r3, [pc, #444]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	4a6e      	ldr	r2, [pc, #440]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	6213      	str	r3, [r2, #32]
 8008e00:	e02d      	b.n	8008e5e <HAL_RCC_OscConfig+0x36e>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10c      	bne.n	8008e24 <HAL_RCC_OscConfig+0x334>
 8008e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	4a69      	ldr	r2, [pc, #420]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e10:	f023 0301 	bic.w	r3, r3, #1
 8008e14:	6213      	str	r3, [r2, #32]
 8008e16:	4b67      	ldr	r3, [pc, #412]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	4a66      	ldr	r2, [pc, #408]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e1c:	f023 0304 	bic.w	r3, r3, #4
 8008e20:	6213      	str	r3, [r2, #32]
 8008e22:	e01c      	b.n	8008e5e <HAL_RCC_OscConfig+0x36e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	2b05      	cmp	r3, #5
 8008e2a:	d10c      	bne.n	8008e46 <HAL_RCC_OscConfig+0x356>
 8008e2c:	4b61      	ldr	r3, [pc, #388]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	4a60      	ldr	r2, [pc, #384]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e32:	f043 0304 	orr.w	r3, r3, #4
 8008e36:	6213      	str	r3, [r2, #32]
 8008e38:	4b5e      	ldr	r3, [pc, #376]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	6213      	str	r3, [r2, #32]
 8008e44:	e00b      	b.n	8008e5e <HAL_RCC_OscConfig+0x36e>
 8008e46:	4b5b      	ldr	r3, [pc, #364]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	4a5a      	ldr	r2, [pc, #360]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e4c:	f023 0301 	bic.w	r3, r3, #1
 8008e50:	6213      	str	r3, [r2, #32]
 8008e52:	4b58      	ldr	r3, [pc, #352]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	4a57      	ldr	r2, [pc, #348]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e58:	f023 0304 	bic.w	r3, r3, #4
 8008e5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d015      	beq.n	8008e92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e66:	f7ff fb6b 	bl	8008540 <HAL_GetTick>
 8008e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e6c:	e00a      	b.n	8008e84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e6e:	f7ff fb67 	bl	8008540 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e0b1      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e84:	4b4b      	ldr	r3, [pc, #300]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0ee      	beq.n	8008e6e <HAL_RCC_OscConfig+0x37e>
 8008e90:	e014      	b.n	8008ebc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e92:	f7ff fb55 	bl	8008540 <HAL_GetTick>
 8008e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e98:	e00a      	b.n	8008eb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e9a:	f7ff fb51 	bl	8008540 <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e09b      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eb0:	4b40      	ldr	r3, [pc, #256]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008eb2:	6a1b      	ldr	r3, [r3, #32]
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1ee      	bne.n	8008e9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d105      	bne.n	8008ece <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	4a3b      	ldr	r2, [pc, #236]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ecc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 8087 	beq.w	8008fe6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ed8:	4b36      	ldr	r3, [pc, #216]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f003 030c 	and.w	r3, r3, #12
 8008ee0:	2b08      	cmp	r3, #8
 8008ee2:	d061      	beq.n	8008fa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d146      	bne.n	8008f7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eec:	4b33      	ldr	r3, [pc, #204]	@ (8008fbc <HAL_RCC_OscConfig+0x4cc>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ef2:	f7ff fb25 	bl	8008540 <HAL_GetTick>
 8008ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ef8:	e008      	b.n	8008f0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008efa:	f7ff fb21 	bl	8008540 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d901      	bls.n	8008f0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e06d      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f0c:	4b29      	ldr	r3, [pc, #164]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f0      	bne.n	8008efa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f20:	d108      	bne.n	8008f34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008f22:	4b24      	ldr	r3, [pc, #144]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	4921      	ldr	r1, [pc, #132]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f34:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a19      	ldr	r1, [r3, #32]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f44:	430b      	orrs	r3, r1
 8008f46:	491b      	ldr	r1, [pc, #108]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8008fbc <HAL_RCC_OscConfig+0x4cc>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f52:	f7ff faf5 	bl	8008540 <HAL_GetTick>
 8008f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f58:	e008      	b.n	8008f6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f5a:	f7ff faf1 	bl	8008540 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d901      	bls.n	8008f6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e03d      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f6c:	4b11      	ldr	r3, [pc, #68]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0f0      	beq.n	8008f5a <HAL_RCC_OscConfig+0x46a>
 8008f78:	e035      	b.n	8008fe6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f7a:	4b10      	ldr	r3, [pc, #64]	@ (8008fbc <HAL_RCC_OscConfig+0x4cc>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f80:	f7ff fade 	bl	8008540 <HAL_GetTick>
 8008f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f86:	e008      	b.n	8008f9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f88:	f7ff fada 	bl	8008540 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d901      	bls.n	8008f9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e026      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f9a:	4b06      	ldr	r3, [pc, #24]	@ (8008fb4 <HAL_RCC_OscConfig+0x4c4>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1f0      	bne.n	8008f88 <HAL_RCC_OscConfig+0x498>
 8008fa6:	e01e      	b.n	8008fe6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d107      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e019      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
 8008fb4:	40021000 	.word	0x40021000
 8008fb8:	40007000 	.word	0x40007000
 8008fbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff0 <HAL_RCC_OscConfig+0x500>)
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d106      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d001      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e000      	b.n	8008fe8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	40021000 	.word	0x40021000

08008ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e0d0      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009008:	4b6a      	ldr	r3, [pc, #424]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0307 	and.w	r3, r3, #7
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d910      	bls.n	8009038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009016:	4b67      	ldr	r3, [pc, #412]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f023 0207 	bic.w	r2, r3, #7
 800901e:	4965      	ldr	r1, [pc, #404]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	4313      	orrs	r3, r2
 8009024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009026:	4b63      	ldr	r3, [pc, #396]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0307 	and.w	r3, r3, #7
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d001      	beq.n	8009038 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e0b8      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d020      	beq.n	8009086 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009050:	4b59      	ldr	r3, [pc, #356]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	4a58      	ldr	r2, [pc, #352]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009056:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800905a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0308 	and.w	r3, r3, #8
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009068:	4b53      	ldr	r3, [pc, #332]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	4a52      	ldr	r2, [pc, #328]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800906e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8009072:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009074:	4b50      	ldr	r3, [pc, #320]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	494d      	ldr	r1, [pc, #308]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009082:	4313      	orrs	r3, r2
 8009084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b00      	cmp	r3, #0
 8009090:	d040      	beq.n	8009114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d107      	bne.n	80090aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909a:	4b47      	ldr	r3, [pc, #284]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d115      	bne.n	80090d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e07f      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d107      	bne.n	80090c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090b2:	4b41      	ldr	r3, [pc, #260]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e073      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090c2:	4b3d      	ldr	r3, [pc, #244]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e06b      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090d2:	4b39      	ldr	r3, [pc, #228]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f023 0203 	bic.w	r2, r3, #3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	4936      	ldr	r1, [pc, #216]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090e4:	f7ff fa2c 	bl	8008540 <HAL_GetTick>
 80090e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090ea:	e00a      	b.n	8009102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ec:	f7ff fa28 	bl	8008540 <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d901      	bls.n	8009102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e053      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009102:	4b2d      	ldr	r3, [pc, #180]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f003 020c 	and.w	r2, r3, #12
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	429a      	cmp	r2, r3
 8009112:	d1eb      	bne.n	80090ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009114:	4b27      	ldr	r3, [pc, #156]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d210      	bcs.n	8009144 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009122:	4b24      	ldr	r3, [pc, #144]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f023 0207 	bic.w	r2, r3, #7
 800912a:	4922      	ldr	r1, [pc, #136]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	4313      	orrs	r3, r2
 8009130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009132:	4b20      	ldr	r3, [pc, #128]	@ (80091b4 <HAL_RCC_ClockConfig+0x1c0>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d001      	beq.n	8009144 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e032      	b.n	80091aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d008      	beq.n	8009162 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009150:	4b19      	ldr	r3, [pc, #100]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	4916      	ldr	r1, [pc, #88]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800915e:	4313      	orrs	r3, r2
 8009160:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	2b00      	cmp	r3, #0
 800916c:	d009      	beq.n	8009182 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800916e:	4b12      	ldr	r3, [pc, #72]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	490e      	ldr	r1, [pc, #56]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800917e:	4313      	orrs	r3, r2
 8009180:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009182:	f000 f821 	bl	80091c8 <HAL_RCC_GetSysClockFreq>
 8009186:	4602      	mov	r2, r0
 8009188:	4b0b      	ldr	r3, [pc, #44]	@ (80091b8 <HAL_RCC_ClockConfig+0x1c4>)
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	091b      	lsrs	r3, r3, #4
 800918e:	f003 030f 	and.w	r3, r3, #15
 8009192:	490a      	ldr	r1, [pc, #40]	@ (80091bc <HAL_RCC_ClockConfig+0x1c8>)
 8009194:	5ccb      	ldrb	r3, [r1, r3]
 8009196:	fa22 f303 	lsr.w	r3, r2, r3
 800919a:	4a09      	ldr	r2, [pc, #36]	@ (80091c0 <HAL_RCC_ClockConfig+0x1cc>)
 800919c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <HAL_RCC_ClockConfig+0x1d0>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff f98a 	bl	80084bc <HAL_InitTick>

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	40022000 	.word	0x40022000
 80091b8:	40021000 	.word	0x40021000
 80091bc:	08009320 	.word	0x08009320
 80091c0:	20000000 	.word	0x20000000
 80091c4:	20000004 	.word	0x20000004

080091c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
 80091d6:	2300      	movs	r3, #0
 80091d8:	617b      	str	r3, [r7, #20]
 80091da:	2300      	movs	r3, #0
 80091dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80091e2:	4b1e      	ldr	r3, [pc, #120]	@ (800925c <HAL_RCC_GetSysClockFreq+0x94>)
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f003 030c 	and.w	r3, r3, #12
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d002      	beq.n	80091f8 <HAL_RCC_GetSysClockFreq+0x30>
 80091f2:	2b08      	cmp	r3, #8
 80091f4:	d003      	beq.n	80091fe <HAL_RCC_GetSysClockFreq+0x36>
 80091f6:	e027      	b.n	8009248 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80091f8:	4b19      	ldr	r3, [pc, #100]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x98>)
 80091fa:	613b      	str	r3, [r7, #16]
      break;
 80091fc:	e027      	b.n	800924e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	0c9b      	lsrs	r3, r3, #18
 8009202:	f003 030f 	and.w	r3, r3, #15
 8009206:	4a17      	ldr	r2, [pc, #92]	@ (8009264 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009208:	5cd3      	ldrb	r3, [r2, r3]
 800920a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d010      	beq.n	8009238 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009216:	4b11      	ldr	r3, [pc, #68]	@ (800925c <HAL_RCC_GetSysClockFreq+0x94>)
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	0c5b      	lsrs	r3, r3, #17
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	4a11      	ldr	r2, [pc, #68]	@ (8009268 <HAL_RCC_GetSysClockFreq+0xa0>)
 8009222:	5cd3      	ldrb	r3, [r2, r3]
 8009224:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a0d      	ldr	r2, [pc, #52]	@ (8009260 <HAL_RCC_GetSysClockFreq+0x98>)
 800922a:	fb03 f202 	mul.w	r2, r3, r2
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	fbb2 f3f3 	udiv	r3, r2, r3
 8009234:	617b      	str	r3, [r7, #20]
 8009236:	e004      	b.n	8009242 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a0c      	ldr	r2, [pc, #48]	@ (800926c <HAL_RCC_GetSysClockFreq+0xa4>)
 800923c:	fb02 f303 	mul.w	r3, r2, r3
 8009240:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	613b      	str	r3, [r7, #16]
      break;
 8009246:	e002      	b.n	800924e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009248:	4b09      	ldr	r3, [pc, #36]	@ (8009270 <HAL_RCC_GetSysClockFreq+0xa8>)
 800924a:	613b      	str	r3, [r7, #16]
      break;
 800924c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800924e:	693b      	ldr	r3, [r7, #16]
}
 8009250:	4618      	mov	r0, r3
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	bc80      	pop	{r7}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	40021000 	.word	0x40021000
 8009260:	00f42400 	.word	0x00f42400
 8009264:	08009330 	.word	0x08009330
 8009268:	08009340 	.word	0x08009340
 800926c:	003d0900 	.word	0x003d0900
 8009270:	007a1200 	.word	0x007a1200

08009274 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800927c:	4b0a      	ldr	r3, [pc, #40]	@ (80092a8 <RCC_Delay+0x34>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a0a      	ldr	r2, [pc, #40]	@ (80092ac <RCC_Delay+0x38>)
 8009282:	fba2 2303 	umull	r2, r3, r2, r3
 8009286:	0a5b      	lsrs	r3, r3, #9
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	fb02 f303 	mul.w	r3, r2, r3
 800928e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009290:	bf00      	nop
  }
  while (Delay --);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	1e5a      	subs	r2, r3, #1
 8009296:	60fa      	str	r2, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1f9      	bne.n	8009290 <RCC_Delay+0x1c>
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr
 80092a8:	20000000 	.word	0x20000000
 80092ac:	10624dd3 	.word	0x10624dd3

080092b0 <memset>:
 80092b0:	4603      	mov	r3, r0
 80092b2:	4402      	add	r2, r0
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d100      	bne.n	80092ba <memset+0xa>
 80092b8:	4770      	bx	lr
 80092ba:	f803 1b01 	strb.w	r1, [r3], #1
 80092be:	e7f9      	b.n	80092b4 <memset+0x4>

080092c0 <__libc_init_array>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	2600      	movs	r6, #0
 80092c4:	4d0c      	ldr	r5, [pc, #48]	@ (80092f8 <__libc_init_array+0x38>)
 80092c6:	4c0d      	ldr	r4, [pc, #52]	@ (80092fc <__libc_init_array+0x3c>)
 80092c8:	1b64      	subs	r4, r4, r5
 80092ca:	10a4      	asrs	r4, r4, #2
 80092cc:	42a6      	cmp	r6, r4
 80092ce:	d109      	bne.n	80092e4 <__libc_init_array+0x24>
 80092d0:	f000 f81a 	bl	8009308 <_init>
 80092d4:	2600      	movs	r6, #0
 80092d6:	4d0a      	ldr	r5, [pc, #40]	@ (8009300 <__libc_init_array+0x40>)
 80092d8:	4c0a      	ldr	r4, [pc, #40]	@ (8009304 <__libc_init_array+0x44>)
 80092da:	1b64      	subs	r4, r4, r5
 80092dc:	10a4      	asrs	r4, r4, #2
 80092de:	42a6      	cmp	r6, r4
 80092e0:	d105      	bne.n	80092ee <__libc_init_array+0x2e>
 80092e2:	bd70      	pop	{r4, r5, r6, pc}
 80092e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092e8:	4798      	blx	r3
 80092ea:	3601      	adds	r6, #1
 80092ec:	e7ee      	b.n	80092cc <__libc_init_array+0xc>
 80092ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f2:	4798      	blx	r3
 80092f4:	3601      	adds	r6, #1
 80092f6:	e7f2      	b.n	80092de <__libc_init_array+0x1e>
 80092f8:	08009344 	.word	0x08009344
 80092fc:	08009344 	.word	0x08009344
 8009300:	08009344 	.word	0x08009344
 8009304:	08009348 	.word	0x08009348

08009308 <_init>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	bf00      	nop
 800930c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930e:	bc08      	pop	{r3}
 8009310:	469e      	mov	lr, r3
 8009312:	4770      	bx	lr

08009314 <_fini>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr
