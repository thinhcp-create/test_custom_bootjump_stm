/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <flash.h>
volatile uint8_t code_save[2048]={0x00};
uint8_t rx_data,rx_buff[30],count=0;
uint16_t index_code_save = 0;
#define PROGRAM_START_PAGE 8
#define PROGRAM_START_ADDRESS 		 	((uint32_t)0x08000000 + ((uint32_t)PROGRAM_START_PAGE*2048))	//Page 8
uint8_t flag = 0;
void Erase_PAGE(uint32_t addr)
{
Flash_Unlock();
  while((FLASH->SR&FLASH_SR_BSY));
  FLASH->CR |= FLASH_CR_PER; //Page Erase Set
  FLASH->AR = addr; //Page Address
  FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
  while((FLASH->SR&FLASH_SR_BSY));
  FLASH->CR &= ~FLASH_SR_BSY;
  FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
Flash_Lock();
}
uint16_t F_read(uint32_t addr)
{
	uint16_t* val = (uint16_t *)addr;
	return *val;
}
char Write_PAGE(uint32_t size,uint32_t page)
{
	uint32_t ADDRESS_PAGE = ((uint32_t)0x08000000 + (page*2048)); //tinh dia chi cua page
	uint32_t addr;
	uint16_t data;
	Flash_Erase(ADDRESS_PAGE);
	Flash_Unlock();
	for(int i=0;i<size/2;i++)
	{
		addr = ADDRESS_PAGE + (i*2);
		FLASH->CR |= FLASH_CR_PG;				/*!< Programming */
		while((FLASH->SR&FLASH_SR_BSY));
		data=((uint16_t)code_save[i*2+1]<<8) | ((uint16_t)code_save[i*2]);
		*(__IO uint16_t*)addr = data;
		while((FLASH->SR&FLASH_SR_BSY));
		FLASH->CR &= ~FLASH_CR_PG;
	}
	//check láº¡i
	for(int i=0;i<size/2;i++)
	{
		addr = ADDRESS_PAGE + (i*2);
		data=((uint16_t)code_save[i*2+1]<<8) | ((uint16_t)code_save[i*2]);
		uint16_t test2=F_read(addr);
		if(data != test2)
			{
				Flash_Lock();
				return 1;
			}
	}
	Flash_Lock();
	return 0 ;
}
void clear_buffer()
{
	for(int i=0;i<1024;i++)code_save[i]=255;
}
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
//#define ADDR_APP_PROGRAM 0x08008000
//typedef void (*run_app_handler)(void);
//run_app_handler run_app;

//void run_app_program()
//{
//	/* Turn off Peripheral, Clear Interrupt Flag*/
//	HAL_RCC_DeInit();
//	 /* Clear Pending Interrupt Request, turn off System Tick*/
//	HAL_DeInit(); /* Turn off fault harder*/
//	SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk |
//	 SCB_SHCSR_BUSFAULTENA_Msk |
//	 SCB_SHCSR_MEMFAULTENA_Msk ) ;
//	/* Set Main Stack Pointer*/
//	 __set_MSP(*((volatile uint32_t*) ADDR_APP_PROGRAM));
//	run_app = (run_app_handler)*((volatile uint32_t*) (ADDR_APP_PROGRAM + 4));
//	run_app();
//}
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

//	if(index_code_save < 1024)
//		code_save[index_code_save++] = rx_data;
//	else
//	{
//		if(Write_PAGE(1024,32+count++)){
//			  HAL_UART_Transmit(&huart1,(uint8_t *) "error", 5,100);
//
//		  }
//		clear_buffer();
//		index_code_save=0;
//		code_save[index_code_save++] = rx_data;
//	}
//	if(count == 4 && index_code_save>=782) code_save[index_code_save++] = rx_data;
	if ( rx_data == '\n' )
	{
//		flag = 1;
//		run_app_program();
//		if(Write_PAGE(1024,32+count++)){
//			  	  			  HAL_UART_Transmit(&huart1,(uint8_t *) "error", 5,100);
//			  	  		 }

	}

	HAL_UART_Receive_IT(&huart1,(uint8_t *)&rx_data,1);

}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	__enable_irq();
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
//  if(Write_PAGE(1024,32)){
//	  HAL_UART_Transmit(&huart1,(uint8_t *) "error", 5,100);
//
//  }
  HAL_UART_Receive_IT(&huart1,(uint8_t *)&rx_data,1);
  HAL_UART_Transmit(&huart1,(uint8_t *) "hello\n", 6,HAL_MAX_DELAY);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  if(flag == 1)
//		  run_app();

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
