
ota_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e8  080081e4  080081e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800a9cc  0800a9cc  000039cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa00  0800aa00  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa00  0800aa00  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa00  0800aa00  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa00  0800aa00  00003a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa04  0800aa04  00003a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800aa08  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080a0  20000018  0800aa20  00004018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200080b8  0800aa20  000040b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000851f  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c50  00000000  00000000  0000c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0000e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000617  00000000  00000000  0000e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e3d  00000000  00000000  0000efc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6be  00000000  00000000  00027e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000906c8  00000000  00000000  000324c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2b8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef8  00000000  00000000  000c2bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000c4ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081e4 <__do_global_dtors_aux>:
 80081e4:	b510      	push	{r4, lr}
 80081e6:	4c05      	ldr	r4, [pc, #20]	@ (80081fc <__do_global_dtors_aux+0x18>)
 80081e8:	7823      	ldrb	r3, [r4, #0]
 80081ea:	b933      	cbnz	r3, 80081fa <__do_global_dtors_aux+0x16>
 80081ec:	4b04      	ldr	r3, [pc, #16]	@ (8008200 <__do_global_dtors_aux+0x1c>)
 80081ee:	b113      	cbz	r3, 80081f6 <__do_global_dtors_aux+0x12>
 80081f0:	4804      	ldr	r0, [pc, #16]	@ (8008204 <__do_global_dtors_aux+0x20>)
 80081f2:	f3af 8000 	nop.w
 80081f6:	2301      	movs	r3, #1
 80081f8:	7023      	strb	r3, [r4, #0]
 80081fa:	bd10      	pop	{r4, pc}
 80081fc:	20000018 	.word	0x20000018
 8008200:	00000000 	.word	0x00000000
 8008204:	0800a9b4 	.word	0x0800a9b4

08008208 <frame_dummy>:
 8008208:	b508      	push	{r3, lr}
 800820a:	4b03      	ldr	r3, [pc, #12]	@ (8008218 <frame_dummy+0x10>)
 800820c:	b11b      	cbz	r3, 8008216 <frame_dummy+0xe>
 800820e:	4903      	ldr	r1, [pc, #12]	@ (800821c <frame_dummy+0x14>)
 8008210:	4803      	ldr	r0, [pc, #12]	@ (8008220 <frame_dummy+0x18>)
 8008212:	f3af 8000 	nop.w
 8008216:	bd08      	pop	{r3, pc}
 8008218:	00000000 	.word	0x00000000
 800821c:	2000001c 	.word	0x2000001c
 8008220:	0800a9b4 	.word	0x0800a9b4

08008224 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	e015      	b.n	800825e <GetPage+0x3a>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8008238:	02db      	lsls	r3, r3, #11
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	429a      	cmp	r2, r3
 800823e:	d20b      	bcs.n	8008258 <GetPage+0x34>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8008246:	02db      	lsls	r3, r3, #11
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d304      	bcc.n	8008258 <GetPage+0x34>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8008254:	02db      	lsls	r3, r3, #11
 8008256:	e006      	b.n	8008266 <GetPage+0x42>
  for (int indx=0; indx<128; indx++)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3301      	adds	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b7f      	cmp	r3, #127	@ 0x7f
 8008262:	dde6      	ble.n	8008232 <GetPage+0xe>
	  }
  }

  return 0;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8008270:	b5b0      	push	{r4, r5, r7, lr}
 8008272:	b08a      	sub	sp, #40	@ 0x28
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	4613      	mov	r3, r2
 800827c:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800827e:	2300      	movs	r3, #0
 8008280:	627b      	str	r3, [r7, #36]	@ 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8008282:	f000 fdc1 	bl	8008e08 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f7ff ffcc 	bl	8008224 <GetPage>
 800828c:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 800828e:	88fb      	ldrh	r3, [r7, #6]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	461a      	mov	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 800829a:	69f8      	ldr	r0, [r7, #28]
 800829c:	f7ff ffc2 	bl	8008224 <GetPage>
 80082a0:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80082a2:	4b20      	ldr	r3, [pc, #128]	@ (8008324 <Flash_Write_Data+0xb4>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80082a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008324 <Flash_Write_Data+0xb4>)
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	0adb      	lsrs	r3, r3, #11
 80082b6:	3301      	adds	r3, #1
 80082b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008324 <Flash_Write_Data+0xb4>)
 80082ba:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80082bc:	f107 0314 	add.w	r3, r7, #20
 80082c0:	4619      	mov	r1, r3
 80082c2:	4818      	ldr	r0, [pc, #96]	@ (8008324 <Flash_Write_Data+0xb4>)
 80082c4:	f000 fe92 	bl	8008fec <HAL_FLASHEx_Erase>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01f      	beq.n	800830e <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 80082ce:	f000 fdd1 	bl	8008e74 <HAL_FLASH_GetError>
 80082d2:	4603      	mov	r3, r0
 80082d4:	e022      	b.n	800831c <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2200      	movs	r2, #0
 80082e2:	461c      	mov	r4, r3
 80082e4:	4615      	mov	r5, r2
 80082e6:	4622      	mov	r2, r4
 80082e8:	462b      	mov	r3, r5
 80082ea:	68f9      	ldr	r1, [r7, #12]
 80082ec:	2002      	movs	r0, #2
 80082ee:	f000 fd1b 	bl	8008d28 <HAL_FLASH_Program>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3304      	adds	r3, #4
 80082fc:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	3301      	adds	r3, #1
 8008302:	627b      	str	r3, [r7, #36]	@ 0x24
 8008304:	e003      	b.n	800830e <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8008306:	f000 fdb5 	bl	8008e74 <HAL_FLASH_GetError>
 800830a:	4603      	mov	r3, r0
 800830c:	e006      	b.n	800831c <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008312:	429a      	cmp	r2, r3
 8008314:	dbdf      	blt.n	80082d6 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8008316:	f000 fd9d 	bl	8008e54 <HAL_FLASH_Lock>

	   return 0;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3728      	adds	r7, #40	@ 0x28
 8008320:	46bd      	mov	sp, r7
 8008322:	bdb0      	pop	{r4, r5, r7, pc}
 8008324:	20000034 	.word	0x20000034

08008328 <merge_uint8_to_uint32_reverse>:
uint16_t index_code_save = 0;

volatile uint8_t code_save[2048*8]={0x00};
volatile uint32_t code_save32[2048*2]={0x00};

void merge_uint8_to_uint32_reverse(const uint8_t *input, size_t input_size, uint32_t *output, size_t output_size) {
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
    if (input_size / 4 > output_size) {
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	089b      	lsrs	r3, r3, #2
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d32f      	bcc.n	80083a0 <merge_uint8_to_uint32_reverse+0x78>
        // Nếu kích thước mảng output không đủ để chứa dữ liệu, kết thúc hàm.
        return;
    }

    for (size_t i = 0; i < input_size / 4; i++) {
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e026      	b.n	8008394 <merge_uint8_to_uint32_reverse+0x6c>
        output[i] = (input[i * 4 + 3] << 24) |
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	3303      	adds	r3, #3
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	061a      	lsls	r2, r3, #24
                    (input[i * 4 + 2] << 16) |
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	3302      	adds	r3, #2
 800835a:	68f9      	ldr	r1, [r7, #12]
 800835c:	440b      	add	r3, r1
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	041b      	lsls	r3, r3, #16
        output[i] = (input[i * 4 + 3] << 24) |
 8008362:	431a      	orrs	r2, r3
                    (input[i * 4 + 1] << 8) |
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	3301      	adds	r3, #1
 800836a:	68f9      	ldr	r1, [r7, #12]
 800836c:	440b      	add	r3, r1
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	021b      	lsls	r3, r3, #8
                    (input[i * 4 + 2] << 16) |
 8008372:	4313      	orrs	r3, r2
                    input[i * 4];
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	0092      	lsls	r2, r2, #2
 8008378:	68f9      	ldr	r1, [r7, #12]
 800837a:	440a      	add	r2, r1
 800837c:	7812      	ldrb	r2, [r2, #0]
                    (input[i * 4 + 1] << 8) |
 800837e:	ea43 0102 	orr.w	r1, r3, r2
        output[i] = (input[i * 4 + 3] << 24) |
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4413      	add	r3, r2
                    (input[i * 4 + 1] << 8) |
 800838a:	460a      	mov	r2, r1
        output[i] = (input[i * 4 + 3] << 24) |
 800838c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < input_size / 4; i++) {
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	3301      	adds	r3, #1
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	089b      	lsrs	r3, r3, #2
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	429a      	cmp	r2, r3
 800839c:	d3d3      	bcc.n	8008346 <merge_uint8_to_uint32_reverse+0x1e>
 800839e:	e000      	b.n	80083a2 <merge_uint8_to_uint32_reverse+0x7a>
        return;
 80083a0:	bf00      	nop
    }
}
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr
	...

080083ac <HAL_UART_RxCpltCallback>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
	code_save[index_code_save++] = rx_data;
 80083b4:	4b09      	ldr	r3, [pc, #36]	@ (80083dc <HAL_UART_RxCpltCallback+0x30>)
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	b291      	uxth	r1, r2
 80083bc:	4a07      	ldr	r2, [pc, #28]	@ (80083dc <HAL_UART_RxCpltCallback+0x30>)
 80083be:	8011      	strh	r1, [r2, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	4b07      	ldr	r3, [pc, #28]	@ (80083e0 <HAL_UART_RxCpltCallback+0x34>)
 80083c4:	7819      	ldrb	r1, [r3, #0]
 80083c6:	4b07      	ldr	r3, [pc, #28]	@ (80083e4 <HAL_UART_RxCpltCallback+0x38>)
 80083c8:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart1,(uint8_t *)&rx_data,1);
 80083ca:	2201      	movs	r2, #1
 80083cc:	4904      	ldr	r1, [pc, #16]	@ (80083e0 <HAL_UART_RxCpltCallback+0x34>)
 80083ce:	4806      	ldr	r0, [pc, #24]	@ (80083e8 <HAL_UART_RxCpltCallback+0x3c>)
 80083d0:	f001 fd35 	bl	8009e3e <HAL_UART_Receive_IT>
//	HAL_UART_Transmit(&huart1, &rx_data,1,100);
//	HAL_UART_Transmit(&huart1, "\n",1,100);

}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000046 	.word	0x20000046
 80083e0:	20000044 	.word	0x20000044
 80083e4:	20000048 	.word	0x20000048
 80083e8:	20008048 	.word	0x20008048

080083ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	SCB->VTOR = (uint32_t)ADDR_APP_PROGRAM ;
 80083f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008464 <main+0x78>)
 80083f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008468 <main+0x7c>)
 80083f4:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80083f6:	b662      	cpsie	i
}
 80083f8:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80083fa:	f000 f9c9 	bl	8008790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80083fe:	f000 f847 	bl	8008490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008402:	f000 f8b5 	bl	8008570 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8008406:	f000 f889 	bl	800851c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)&rx_data,1);
 800840a:	2201      	movs	r2, #1
 800840c:	4917      	ldr	r1, [pc, #92]	@ (800846c <main+0x80>)
 800840e:	4818      	ldr	r0, [pc, #96]	@ (8008470 <main+0x84>)
 8008410:	f001 fd15 	bl	8009e3e <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1,(uint8_t *) "hello\n", 6,HAL_MAX_DELAY);
 8008414:	f04f 33ff 	mov.w	r3, #4294967295
 8008418:	2206      	movs	r2, #6
 800841a:	4916      	ldr	r1, [pc, #88]	@ (8008474 <main+0x88>)
 800841c:	4814      	ldr	r0, [pc, #80]	@ (8008470 <main+0x84>)
 800841e:	f001 fc83 	bl	8009d28 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(index_code_save==0x1358){
 8008422:	4b15      	ldr	r3, [pc, #84]	@ (8008478 <main+0x8c>)
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	f241 3258 	movw	r2, #4952	@ 0x1358
 800842a:	4293      	cmp	r3, r2
 800842c:	d1f9      	bne.n	8008422 <main+0x36>
		  merge_uint8_to_uint32_reverse(code_save,index_code_save,code_save32,sizeof(code_save32));
 800842e:	4b12      	ldr	r3, [pc, #72]	@ (8008478 <main+0x8c>)
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	4619      	mov	r1, r3
 8008434:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008438:	4a10      	ldr	r2, [pc, #64]	@ (800847c <main+0x90>)
 800843a:	4811      	ldr	r0, [pc, #68]	@ (8008480 <main+0x94>)
 800843c:	f7ff ff74 	bl	8008328 <merge_uint8_to_uint32_reverse>
		  Flash_Write_Data(0x8023000,code_save32,sizeof(code_save32)/4);
 8008440:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008444:	490d      	ldr	r1, [pc, #52]	@ (800847c <main+0x90>)
 8008446:	480f      	ldr	r0, [pc, #60]	@ (8008484 <main+0x98>)
 8008448:	f7ff ff12 	bl	8008270 <Flash_Write_Data>
		  static uint32_t info[3]= {0x5678,1,0x96655B80};
		  Flash_Write_Data(0x0803F000,info,3);
 800844c:	2203      	movs	r2, #3
 800844e:	490e      	ldr	r1, [pc, #56]	@ (8008488 <main+0x9c>)
 8008450:	480e      	ldr	r0, [pc, #56]	@ (800848c <main+0xa0>)
 8008452:	f7ff ff0d 	bl	8008270 <Flash_Write_Data>

		  HAL_NVIC_SystemReset();
 8008456:	f000 fb14 	bl	8008a82 <HAL_NVIC_SystemReset>
		  index_code_save =0;
 800845a:	4b07      	ldr	r3, [pc, #28]	@ (8008478 <main+0x8c>)
 800845c:	2200      	movs	r2, #0
 800845e:	801a      	strh	r2, [r3, #0]
	  if(index_code_save==0x1358){
 8008460:	e7df      	b.n	8008422 <main+0x36>
 8008462:	bf00      	nop
 8008464:	e000ed00 	.word	0xe000ed00
 8008468:	08008000 	.word	0x08008000
 800846c:	20000044 	.word	0x20000044
 8008470:	20008048 	.word	0x20008048
 8008474:	0800a9cc 	.word	0x0800a9cc
 8008478:	20000046 	.word	0x20000046
 800847c:	20004048 	.word	0x20004048
 8008480:	20000048 	.word	0x20000048
 8008484:	08023000 	.word	0x08023000
 8008488:	20000000 	.word	0x20000000
 800848c:	0803f000 	.word	0x0803f000

08008490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b090      	sub	sp, #64	@ 0x40
 8008494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008496:	f107 0318 	add.w	r3, r7, #24
 800849a:	2228      	movs	r2, #40	@ 0x28
 800849c:	2100      	movs	r1, #0
 800849e:	4618      	mov	r0, r3
 80084a0:	f002 fa5c 	bl	800a95c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084a4:	1d3b      	adds	r3, r7, #4
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	605a      	str	r2, [r3, #4]
 80084ac:	609a      	str	r2, [r3, #8]
 80084ae:	60da      	str	r2, [r3, #12]
 80084b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80084b2:	2301      	movs	r3, #1
 80084b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80084b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80084ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80084bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80084c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80084c2:	2301      	movs	r3, #1
 80084c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80084c6:	2302      	movs	r3, #2
 80084c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80084ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80084ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80084d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80084d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084d6:	f107 0318 	add.w	r3, r7, #24
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 ffc2 	bl	8009464 <HAL_RCC_OscConfig>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80084e6:	f000 f865 	bl	80085b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80084ea:	230f      	movs	r3, #15
 80084ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80084ee:	2302      	movs	r3, #2
 80084f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80084f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80084fc:	2300      	movs	r3, #0
 80084fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	2102      	movs	r1, #2
 8008504:	4618      	mov	r0, r3
 8008506:	f001 fa2f 	bl	8009968 <HAL_RCC_ClockConfig>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8008510:	f000 f850 	bl	80085b4 <Error_Handler>
  }
}
 8008514:	bf00      	nop
 8008516:	3740      	adds	r7, #64	@ 0x40
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008520:	4b11      	ldr	r3, [pc, #68]	@ (8008568 <MX_USART1_UART_Init+0x4c>)
 8008522:	4a12      	ldr	r2, [pc, #72]	@ (800856c <MX_USART1_UART_Init+0x50>)
 8008524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008526:	4b10      	ldr	r3, [pc, #64]	@ (8008568 <MX_USART1_UART_Init+0x4c>)
 8008528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800852c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800852e:	4b0e      	ldr	r3, [pc, #56]	@ (8008568 <MX_USART1_UART_Init+0x4c>)
 8008530:	2200      	movs	r2, #0
 8008532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008534:	4b0c      	ldr	r3, [pc, #48]	@ (8008568 <MX_USART1_UART_Init+0x4c>)
 8008536:	2200      	movs	r2, #0
 8008538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800853a:	4b0b      	ldr	r3, [pc, #44]	@ (8008568 <MX_USART1_UART_Init+0x4c>)
 800853c:	2200      	movs	r2, #0
 800853e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008540:	4b09      	ldr	r3, [pc, #36]	@ (8008568 <MX_USART1_UART_Init+0x4c>)
 8008542:	220c      	movs	r2, #12
 8008544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008546:	4b08      	ldr	r3, [pc, #32]	@ (8008568 <MX_USART1_UART_Init+0x4c>)
 8008548:	2200      	movs	r2, #0
 800854a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800854c:	4b06      	ldr	r3, [pc, #24]	@ (8008568 <MX_USART1_UART_Init+0x4c>)
 800854e:	2200      	movs	r2, #0
 8008550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008552:	4805      	ldr	r0, [pc, #20]	@ (8008568 <MX_USART1_UART_Init+0x4c>)
 8008554:	f001 fb98 	bl	8009c88 <HAL_UART_Init>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800855e:	f000 f829 	bl	80085b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008562:	bf00      	nop
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20008048 	.word	0x20008048
 800856c:	40013800 	.word	0x40013800

08008570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008576:	4b0e      	ldr	r3, [pc, #56]	@ (80085b0 <MX_GPIO_Init+0x40>)
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	4a0d      	ldr	r2, [pc, #52]	@ (80085b0 <MX_GPIO_Init+0x40>)
 800857c:	f043 0320 	orr.w	r3, r3, #32
 8008580:	6193      	str	r3, [r2, #24]
 8008582:	4b0b      	ldr	r3, [pc, #44]	@ (80085b0 <MX_GPIO_Init+0x40>)
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800858e:	4b08      	ldr	r3, [pc, #32]	@ (80085b0 <MX_GPIO_Init+0x40>)
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	4a07      	ldr	r2, [pc, #28]	@ (80085b0 <MX_GPIO_Init+0x40>)
 8008594:	f043 0304 	orr.w	r3, r3, #4
 8008598:	6193      	str	r3, [r2, #24]
 800859a:	4b05      	ldr	r3, [pc, #20]	@ (80085b0 <MX_GPIO_Init+0x40>)
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	f003 0304 	and.w	r3, r3, #4
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr
 80085b0:	40021000 	.word	0x40021000

080085b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80085b8:	b672      	cpsid	i
}
 80085ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80085bc:	bf00      	nop
 80085be:	e7fd      	b.n	80085bc <Error_Handler+0x8>

080085c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80085c6:	4b15      	ldr	r3, [pc, #84]	@ (800861c <HAL_MspInit+0x5c>)
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	4a14      	ldr	r2, [pc, #80]	@ (800861c <HAL_MspInit+0x5c>)
 80085cc:	f043 0301 	orr.w	r3, r3, #1
 80085d0:	6193      	str	r3, [r2, #24]
 80085d2:	4b12      	ldr	r3, [pc, #72]	@ (800861c <HAL_MspInit+0x5c>)
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	60bb      	str	r3, [r7, #8]
 80085dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085de:	4b0f      	ldr	r3, [pc, #60]	@ (800861c <HAL_MspInit+0x5c>)
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	4a0e      	ldr	r2, [pc, #56]	@ (800861c <HAL_MspInit+0x5c>)
 80085e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085e8:	61d3      	str	r3, [r2, #28]
 80085ea:	4b0c      	ldr	r3, [pc, #48]	@ (800861c <HAL_MspInit+0x5c>)
 80085ec:	69db      	ldr	r3, [r3, #28]
 80085ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085f2:	607b      	str	r3, [r7, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80085f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008620 <HAL_MspInit+0x60>)
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	4a04      	ldr	r2, [pc, #16]	@ (8008620 <HAL_MspInit+0x60>)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008612:	bf00      	nop
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	bc80      	pop	{r7}
 800861a:	4770      	bx	lr
 800861c:	40021000 	.word	0x40021000
 8008620:	40010000 	.word	0x40010000

08008624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800862c:	f107 0310 	add.w	r3, r7, #16
 8008630:	2200      	movs	r2, #0
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	605a      	str	r2, [r3, #4]
 8008636:	609a      	str	r2, [r3, #8]
 8008638:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a20      	ldr	r2, [pc, #128]	@ (80086c0 <HAL_UART_MspInit+0x9c>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d139      	bne.n	80086b8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008644:	4b1f      	ldr	r3, [pc, #124]	@ (80086c4 <HAL_UART_MspInit+0xa0>)
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	4a1e      	ldr	r2, [pc, #120]	@ (80086c4 <HAL_UART_MspInit+0xa0>)
 800864a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800864e:	6193      	str	r3, [r2, #24]
 8008650:	4b1c      	ldr	r3, [pc, #112]	@ (80086c4 <HAL_UART_MspInit+0xa0>)
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800865c:	4b19      	ldr	r3, [pc, #100]	@ (80086c4 <HAL_UART_MspInit+0xa0>)
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	4a18      	ldr	r2, [pc, #96]	@ (80086c4 <HAL_UART_MspInit+0xa0>)
 8008662:	f043 0304 	orr.w	r3, r3, #4
 8008666:	6193      	str	r3, [r2, #24]
 8008668:	4b16      	ldr	r3, [pc, #88]	@ (80086c4 <HAL_UART_MspInit+0xa0>)
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	60bb      	str	r3, [r7, #8]
 8008672:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008678:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800867a:	2302      	movs	r3, #2
 800867c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800867e:	2303      	movs	r3, #3
 8008680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008682:	f107 0310 	add.w	r3, r7, #16
 8008686:	4619      	mov	r1, r3
 8008688:	480f      	ldr	r0, [pc, #60]	@ (80086c8 <HAL_UART_MspInit+0xa4>)
 800868a:	f000 fd57 	bl	800913c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800868e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008698:	2300      	movs	r3, #0
 800869a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800869c:	f107 0310 	add.w	r3, r7, #16
 80086a0:	4619      	mov	r1, r3
 80086a2:	4809      	ldr	r0, [pc, #36]	@ (80086c8 <HAL_UART_MspInit+0xa4>)
 80086a4:	f000 fd4a 	bl	800913c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	2025      	movs	r0, #37	@ 0x25
 80086ae:	f000 f9be 	bl	8008a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80086b2:	2025      	movs	r0, #37	@ 0x25
 80086b4:	f000 f9d7 	bl	8008a66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80086b8:	bf00      	nop
 80086ba:	3720      	adds	r7, #32
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	40013800 	.word	0x40013800
 80086c4:	40021000 	.word	0x40021000
 80086c8:	40010800 	.word	0x40010800

080086cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80086d0:	bf00      	nop
 80086d2:	e7fd      	b.n	80086d0 <NMI_Handler+0x4>

080086d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086d4:	b480      	push	{r7}
 80086d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086d8:	bf00      	nop
 80086da:	e7fd      	b.n	80086d8 <HardFault_Handler+0x4>

080086dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086e0:	bf00      	nop
 80086e2:	e7fd      	b.n	80086e0 <MemManage_Handler+0x4>

080086e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086e8:	bf00      	nop
 80086ea:	e7fd      	b.n	80086e8 <BusFault_Handler+0x4>

080086ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086ec:	b480      	push	{r7}
 80086ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086f0:	bf00      	nop
 80086f2:	e7fd      	b.n	80086f0 <UsageFault_Handler+0x4>

080086f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80086f8:	bf00      	nop
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008704:	bf00      	nop
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr

0800870c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008710:	bf00      	nop
 8008712:	46bd      	mov	sp, r7
 8008714:	bc80      	pop	{r7}
 8008716:	4770      	bx	lr

08008718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800871c:	f000 f87e 	bl	800881c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008720:	bf00      	nop
 8008722:	bd80      	pop	{r7, pc}

08008724 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008728:	4802      	ldr	r0, [pc, #8]	@ (8008734 <USART1_IRQHandler+0x10>)
 800872a:	f001 fbad 	bl	8009e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800872e:	bf00      	nop
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20008048 	.word	0x20008048

08008738 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008738:	b480      	push	{r7}
 800873a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800873c:	bf00      	nop
 800873e:	46bd      	mov	sp, r7
 8008740:	bc80      	pop	{r7}
 8008742:	4770      	bx	lr

08008744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008744:	f7ff fff8 	bl	8008738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008748:	480b      	ldr	r0, [pc, #44]	@ (8008778 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800874a:	490c      	ldr	r1, [pc, #48]	@ (800877c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800874c:	4a0c      	ldr	r2, [pc, #48]	@ (8008780 <LoopFillZerobss+0x16>)
  movs r3, #0
 800874e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008750:	e002      	b.n	8008758 <LoopCopyDataInit>

08008752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008756:	3304      	adds	r3, #4

08008758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800875a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800875c:	d3f9      	bcc.n	8008752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800875e:	4a09      	ldr	r2, [pc, #36]	@ (8008784 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008760:	4c09      	ldr	r4, [pc, #36]	@ (8008788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008764:	e001      	b.n	800876a <LoopFillZerobss>

08008766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008768:	3204      	adds	r2, #4

0800876a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800876a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800876c:	d3fb      	bcc.n	8008766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800876e:	f002 f8fd 	bl	800a96c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008772:	f7ff fe3b 	bl	80083ec <main>
  bx lr
 8008776:	4770      	bx	lr
  ldr r0, =_sdata
 8008778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800877c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8008780:	0800aa08 	.word	0x0800aa08
  ldr r2, =_sbss
 8008784:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8008788:	200080b8 	.word	0x200080b8

0800878c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800878c:	e7fe      	b.n	800878c <ADC1_2_IRQHandler>
	...

08008790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008794:	4b08      	ldr	r3, [pc, #32]	@ (80087b8 <HAL_Init+0x28>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a07      	ldr	r2, [pc, #28]	@ (80087b8 <HAL_Init+0x28>)
 800879a:	f043 0310 	orr.w	r3, r3, #16
 800879e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087a0:	2003      	movs	r0, #3
 80087a2:	f000 f939 	bl	8008a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087a6:	200f      	movs	r0, #15
 80087a8:	f000 f808 	bl	80087bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087ac:	f7ff ff08 	bl	80085c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	40022000 	.word	0x40022000

080087bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80087c4:	4b12      	ldr	r3, [pc, #72]	@ (8008810 <HAL_InitTick+0x54>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	4b12      	ldr	r3, [pc, #72]	@ (8008814 <HAL_InitTick+0x58>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	4619      	mov	r1, r3
 80087ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80087d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80087d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 f955 	bl	8008a8a <HAL_SYSTICK_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e00e      	b.n	8008808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b0f      	cmp	r3, #15
 80087ee:	d80a      	bhi.n	8008806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087f0:	2200      	movs	r2, #0
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	f000 f919 	bl	8008a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087fc:	4a06      	ldr	r2, [pc, #24]	@ (8008818 <HAL_InitTick+0x5c>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	e000      	b.n	8008808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	2000000c 	.word	0x2000000c
 8008814:	20000014 	.word	0x20000014
 8008818:	20000010 	.word	0x20000010

0800881c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008820:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <HAL_IncTick+0x1c>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	4b05      	ldr	r3, [pc, #20]	@ (800883c <HAL_IncTick+0x20>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4413      	add	r3, r2
 800882c:	4a03      	ldr	r2, [pc, #12]	@ (800883c <HAL_IncTick+0x20>)
 800882e:	6013      	str	r3, [r2, #0]
}
 8008830:	bf00      	nop
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr
 8008838:	20000014 	.word	0x20000014
 800883c:	20008090 	.word	0x20008090

08008840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0
  return uwTick;
 8008844:	4b02      	ldr	r3, [pc, #8]	@ (8008850 <HAL_GetTick+0x10>)
 8008846:	681b      	ldr	r3, [r3, #0]
}
 8008848:	4618      	mov	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr
 8008850:	20008090 	.word	0x20008090

08008854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008864:	4b0c      	ldr	r3, [pc, #48]	@ (8008898 <__NVIC_SetPriorityGrouping+0x44>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008870:	4013      	ands	r3, r2
 8008872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800887c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008886:	4a04      	ldr	r2, [pc, #16]	@ (8008898 <__NVIC_SetPriorityGrouping+0x44>)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	60d3      	str	r3, [r2, #12]
}
 800888c:	bf00      	nop
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	e000ed00 	.word	0xe000ed00

0800889c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088a0:	4b04      	ldr	r3, [pc, #16]	@ (80088b4 <__NVIC_GetPriorityGrouping+0x18>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	0a1b      	lsrs	r3, r3, #8
 80088a6:	f003 0307 	and.w	r3, r3, #7
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bc80      	pop	{r7}
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	e000ed00 	.word	0xe000ed00

080088b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	db0b      	blt.n	80088e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	f003 021f 	and.w	r2, r3, #31
 80088d0:	4906      	ldr	r1, [pc, #24]	@ (80088ec <__NVIC_EnableIRQ+0x34>)
 80088d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088d6:	095b      	lsrs	r3, r3, #5
 80088d8:	2001      	movs	r0, #1
 80088da:	fa00 f202 	lsl.w	r2, r0, r2
 80088de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bc80      	pop	{r7}
 80088ea:	4770      	bx	lr
 80088ec:	e000e100 	.word	0xe000e100

080088f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008900:	2b00      	cmp	r3, #0
 8008902:	db0a      	blt.n	800891a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	b2da      	uxtb	r2, r3
 8008908:	490c      	ldr	r1, [pc, #48]	@ (800893c <__NVIC_SetPriority+0x4c>)
 800890a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800890e:	0112      	lsls	r2, r2, #4
 8008910:	b2d2      	uxtb	r2, r2
 8008912:	440b      	add	r3, r1
 8008914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008918:	e00a      	b.n	8008930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	b2da      	uxtb	r2, r3
 800891e:	4908      	ldr	r1, [pc, #32]	@ (8008940 <__NVIC_SetPriority+0x50>)
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	f003 030f 	and.w	r3, r3, #15
 8008926:	3b04      	subs	r3, #4
 8008928:	0112      	lsls	r2, r2, #4
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	440b      	add	r3, r1
 800892e:	761a      	strb	r2, [r3, #24]
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	bc80      	pop	{r7}
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	e000e100 	.word	0xe000e100
 8008940:	e000ed00 	.word	0xe000ed00

08008944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008944:	b480      	push	{r7}
 8008946:	b089      	sub	sp, #36	@ 0x24
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	f1c3 0307 	rsb	r3, r3, #7
 800895e:	2b04      	cmp	r3, #4
 8008960:	bf28      	it	cs
 8008962:	2304      	movcs	r3, #4
 8008964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	3304      	adds	r3, #4
 800896a:	2b06      	cmp	r3, #6
 800896c:	d902      	bls.n	8008974 <NVIC_EncodePriority+0x30>
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	3b03      	subs	r3, #3
 8008972:	e000      	b.n	8008976 <NVIC_EncodePriority+0x32>
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008978:	f04f 32ff 	mov.w	r2, #4294967295
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	43da      	mvns	r2, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	401a      	ands	r2, r3
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800898c:	f04f 31ff 	mov.w	r1, #4294967295
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	fa01 f303 	lsl.w	r3, r1, r3
 8008996:	43d9      	mvns	r1, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800899c:	4313      	orrs	r3, r2
         );
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3724      	adds	r7, #36	@ 0x24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80089ac:	f3bf 8f4f 	dsb	sy
}
 80089b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80089b2:	4b06      	ldr	r3, [pc, #24]	@ (80089cc <__NVIC_SystemReset+0x24>)
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80089ba:	4904      	ldr	r1, [pc, #16]	@ (80089cc <__NVIC_SystemReset+0x24>)
 80089bc:	4b04      	ldr	r3, [pc, #16]	@ (80089d0 <__NVIC_SystemReset+0x28>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80089c2:	f3bf 8f4f 	dsb	sy
}
 80089c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80089c8:	bf00      	nop
 80089ca:	e7fd      	b.n	80089c8 <__NVIC_SystemReset+0x20>
 80089cc:	e000ed00 	.word	0xe000ed00
 80089d0:	05fa0004 	.word	0x05fa0004

080089d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3b01      	subs	r3, #1
 80089e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089e4:	d301      	bcc.n	80089ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80089e6:	2301      	movs	r3, #1
 80089e8:	e00f      	b.n	8008a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008a14 <SysTick_Config+0x40>)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80089f2:	210f      	movs	r1, #15
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	f7ff ff7a 	bl	80088f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089fc:	4b05      	ldr	r3, [pc, #20]	@ (8008a14 <SysTick_Config+0x40>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a02:	4b04      	ldr	r3, [pc, #16]	@ (8008a14 <SysTick_Config+0x40>)
 8008a04:	2207      	movs	r2, #7
 8008a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	e000e010 	.word	0xe000e010

08008a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff ff17 	bl	8008854 <__NVIC_SetPriorityGrouping>
}
 8008a26:	bf00      	nop
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b086      	sub	sp, #24
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	4603      	mov	r3, r0
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	607a      	str	r2, [r7, #4]
 8008a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a40:	f7ff ff2c 	bl	800889c <__NVIC_GetPriorityGrouping>
 8008a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	6978      	ldr	r0, [r7, #20]
 8008a4c:	f7ff ff7a 	bl	8008944 <NVIC_EncodePriority>
 8008a50:	4602      	mov	r2, r0
 8008a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a56:	4611      	mov	r1, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff ff49 	bl	80088f0 <__NVIC_SetPriority>
}
 8008a5e:	bf00      	nop
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b082      	sub	sp, #8
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7ff ff1f 	bl	80088b8 <__NVIC_EnableIRQ>
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008a86:	f7ff ff8f 	bl	80089a8 <__NVIC_SystemReset>

08008a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b082      	sub	sp, #8
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff ff9e 	bl	80089d4 <SysTick_Config>
 8008a98:	4603      	mov	r3, r0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b085      	sub	sp, #20
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d008      	beq.n	8008acc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2204      	movs	r2, #4
 8008abe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e020      	b.n	8008b0e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 020e 	bic.w	r2, r2, #14
 8008ada:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0201 	bic.w	r2, r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af4:	2101      	movs	r1, #1
 8008af6:	fa01 f202 	lsl.w	r2, r1, r2
 8008afa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bc80      	pop	{r7}
 8008b16:	4770      	bx	lr

08008b18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d005      	beq.n	8008b3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2204      	movs	r2, #4
 8008b34:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	73fb      	strb	r3, [r7, #15]
 8008b3a:	e0d6      	b.n	8008cea <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 020e 	bic.w	r2, r2, #14
 8008b4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 0201 	bic.w	r2, r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	4b64      	ldr	r3, [pc, #400]	@ (8008cf4 <HAL_DMA_Abort_IT+0x1dc>)
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d958      	bls.n	8008c1a <HAL_DMA_Abort_IT+0x102>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a62      	ldr	r2, [pc, #392]	@ (8008cf8 <HAL_DMA_Abort_IT+0x1e0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d04f      	beq.n	8008c12 <HAL_DMA_Abort_IT+0xfa>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a61      	ldr	r2, [pc, #388]	@ (8008cfc <HAL_DMA_Abort_IT+0x1e4>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d048      	beq.n	8008c0e <HAL_DMA_Abort_IT+0xf6>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a5f      	ldr	r2, [pc, #380]	@ (8008d00 <HAL_DMA_Abort_IT+0x1e8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d040      	beq.n	8008c08 <HAL_DMA_Abort_IT+0xf0>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a5e      	ldr	r2, [pc, #376]	@ (8008d04 <HAL_DMA_Abort_IT+0x1ec>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d038      	beq.n	8008c02 <HAL_DMA_Abort_IT+0xea>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a5c      	ldr	r2, [pc, #368]	@ (8008d08 <HAL_DMA_Abort_IT+0x1f0>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d030      	beq.n	8008bfc <HAL_DMA_Abort_IT+0xe4>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8008d0c <HAL_DMA_Abort_IT+0x1f4>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d028      	beq.n	8008bf6 <HAL_DMA_Abort_IT+0xde>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a52      	ldr	r2, [pc, #328]	@ (8008cf4 <HAL_DMA_Abort_IT+0x1dc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d020      	beq.n	8008bf0 <HAL_DMA_Abort_IT+0xd8>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a57      	ldr	r2, [pc, #348]	@ (8008d10 <HAL_DMA_Abort_IT+0x1f8>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d019      	beq.n	8008bec <HAL_DMA_Abort_IT+0xd4>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a55      	ldr	r2, [pc, #340]	@ (8008d14 <HAL_DMA_Abort_IT+0x1fc>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d012      	beq.n	8008be8 <HAL_DMA_Abort_IT+0xd0>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a54      	ldr	r2, [pc, #336]	@ (8008d18 <HAL_DMA_Abort_IT+0x200>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00a      	beq.n	8008be2 <HAL_DMA_Abort_IT+0xca>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a52      	ldr	r2, [pc, #328]	@ (8008d1c <HAL_DMA_Abort_IT+0x204>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d102      	bne.n	8008bdc <HAL_DMA_Abort_IT+0xc4>
 8008bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008bda:	e01b      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008bdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008be0:	e018      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008be2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008be6:	e015      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008be8:	2310      	movs	r3, #16
 8008bea:	e013      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008bec:	2301      	movs	r3, #1
 8008bee:	e011      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008bf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008bf4:	e00e      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008bf6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008bfa:	e00b      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008bfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008c00:	e008      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008c02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c06:	e005      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c0c:	e002      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008c0e:	2310      	movs	r3, #16
 8008c10:	e000      	b.n	8008c14 <HAL_DMA_Abort_IT+0xfc>
 8008c12:	2301      	movs	r3, #1
 8008c14:	4a42      	ldr	r2, [pc, #264]	@ (8008d20 <HAL_DMA_Abort_IT+0x208>)
 8008c16:	6053      	str	r3, [r2, #4]
 8008c18:	e057      	b.n	8008cca <HAL_DMA_Abort_IT+0x1b2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a36      	ldr	r2, [pc, #216]	@ (8008cf8 <HAL_DMA_Abort_IT+0x1e0>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d04f      	beq.n	8008cc4 <HAL_DMA_Abort_IT+0x1ac>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a34      	ldr	r2, [pc, #208]	@ (8008cfc <HAL_DMA_Abort_IT+0x1e4>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d048      	beq.n	8008cc0 <HAL_DMA_Abort_IT+0x1a8>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a33      	ldr	r2, [pc, #204]	@ (8008d00 <HAL_DMA_Abort_IT+0x1e8>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d040      	beq.n	8008cba <HAL_DMA_Abort_IT+0x1a2>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a31      	ldr	r2, [pc, #196]	@ (8008d04 <HAL_DMA_Abort_IT+0x1ec>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d038      	beq.n	8008cb4 <HAL_DMA_Abort_IT+0x19c>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a30      	ldr	r2, [pc, #192]	@ (8008d08 <HAL_DMA_Abort_IT+0x1f0>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d030      	beq.n	8008cae <HAL_DMA_Abort_IT+0x196>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a2e      	ldr	r2, [pc, #184]	@ (8008d0c <HAL_DMA_Abort_IT+0x1f4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d028      	beq.n	8008ca8 <HAL_DMA_Abort_IT+0x190>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a26      	ldr	r2, [pc, #152]	@ (8008cf4 <HAL_DMA_Abort_IT+0x1dc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d020      	beq.n	8008ca2 <HAL_DMA_Abort_IT+0x18a>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a2a      	ldr	r2, [pc, #168]	@ (8008d10 <HAL_DMA_Abort_IT+0x1f8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d019      	beq.n	8008c9e <HAL_DMA_Abort_IT+0x186>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a29      	ldr	r2, [pc, #164]	@ (8008d14 <HAL_DMA_Abort_IT+0x1fc>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d012      	beq.n	8008c9a <HAL_DMA_Abort_IT+0x182>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a27      	ldr	r2, [pc, #156]	@ (8008d18 <HAL_DMA_Abort_IT+0x200>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d00a      	beq.n	8008c94 <HAL_DMA_Abort_IT+0x17c>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a26      	ldr	r2, [pc, #152]	@ (8008d1c <HAL_DMA_Abort_IT+0x204>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d102      	bne.n	8008c8e <HAL_DMA_Abort_IT+0x176>
 8008c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c8c:	e01b      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008c8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008c92:	e018      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c98:	e015      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008c9a:	2310      	movs	r3, #16
 8008c9c:	e013      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e011      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008ca2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ca6:	e00e      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008ca8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008cac:	e00b      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008cae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008cb2:	e008      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008cb8:	e005      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008cbe:	e002      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	e000      	b.n	8008cc6 <HAL_DMA_Abort_IT+0x1ae>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	4a17      	ldr	r2, [pc, #92]	@ (8008d24 <HAL_DMA_Abort_IT+0x20c>)
 8008cc8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	4798      	blx	r3
    } 
  }
  return status;
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	40020080 	.word	0x40020080
 8008cf8:	40020008 	.word	0x40020008
 8008cfc:	4002001c 	.word	0x4002001c
 8008d00:	40020030 	.word	0x40020030
 8008d04:	40020044 	.word	0x40020044
 8008d08:	40020058 	.word	0x40020058
 8008d0c:	4002006c 	.word	0x4002006c
 8008d10:	40020408 	.word	0x40020408
 8008d14:	4002041c 	.word	0x4002041c
 8008d18:	40020430 	.word	0x40020430
 8008d1c:	40020444 	.word	0x40020444
 8008d20:	40020400 	.word	0x40020400
 8008d24:	40020000 	.word	0x40020000

08008d28 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008d42:	4b2f      	ldr	r3, [pc, #188]	@ (8008e00 <HAL_FLASH_Program+0xd8>)
 8008d44:	7e1b      	ldrb	r3, [r3, #24]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_FLASH_Program+0x26>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e054      	b.n	8008df8 <HAL_FLASH_Program+0xd0>
 8008d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8008e00 <HAL_FLASH_Program+0xd8>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008d54:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008d58:	f000 f8b2 	bl	8008ec0 <FLASH_WaitForLastOperation>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d144      	bne.n	8008df0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d102      	bne.n	8008d72 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	757b      	strb	r3, [r7, #21]
 8008d70:	e007      	b.n	8008d82 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d102      	bne.n	8008d7e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8008d78:	2302      	movs	r3, #2
 8008d7a:	757b      	strb	r3, [r7, #21]
 8008d7c:	e001      	b.n	8008d82 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8008d7e:	2304      	movs	r3, #4
 8008d80:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8008d82:	2300      	movs	r3, #0
 8008d84:	75bb      	strb	r3, [r7, #22]
 8008d86:	e02d      	b.n	8008de4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8008d88:	7dbb      	ldrb	r3, [r7, #22]
 8008d8a:	005a      	lsls	r2, r3, #1
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	eb02 0c03 	add.w	ip, r2, r3
 8008d92:	7dbb      	ldrb	r3, [r7, #22]
 8008d94:	0119      	lsls	r1, r3, #4
 8008d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9a:	f1c1 0620 	rsb	r6, r1, #32
 8008d9e:	f1a1 0020 	sub.w	r0, r1, #32
 8008da2:	fa22 f401 	lsr.w	r4, r2, r1
 8008da6:	fa03 f606 	lsl.w	r6, r3, r6
 8008daa:	4334      	orrs	r4, r6
 8008dac:	fa23 f000 	lsr.w	r0, r3, r0
 8008db0:	4304      	orrs	r4, r0
 8008db2:	fa23 f501 	lsr.w	r5, r3, r1
 8008db6:	b2a3      	uxth	r3, r4
 8008db8:	4619      	mov	r1, r3
 8008dba:	4660      	mov	r0, ip
 8008dbc:	f000 f864 	bl	8008e88 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008dc0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008dc4:	f000 f87c 	bl	8008ec0 <FLASH_WaitForLastOperation>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e04 <HAL_FLASH_Program+0xdc>)
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8008e04 <HAL_FLASH_Program+0xdc>)
 8008dd2:	f023 0301 	bic.w	r3, r3, #1
 8008dd6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d107      	bne.n	8008dee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8008dde:	7dbb      	ldrb	r3, [r7, #22]
 8008de0:	3301      	adds	r3, #1
 8008de2:	75bb      	strb	r3, [r7, #22]
 8008de4:	7dba      	ldrb	r2, [r7, #22]
 8008de6:	7d7b      	ldrb	r3, [r7, #21]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d3cd      	bcc.n	8008d88 <HAL_FLASH_Program+0x60>
 8008dec:	e000      	b.n	8008df0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8008dee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008df0:	4b03      	ldr	r3, [pc, #12]	@ (8008e00 <HAL_FLASH_Program+0xd8>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	761a      	strb	r2, [r3, #24]

  return status;
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	371c      	adds	r7, #28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e00:	20008098 	.word	0x20008098
 8008e04:	40022000 	.word	0x40022000

08008e08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008e12:	4b0d      	ldr	r3, [pc, #52]	@ (8008e48 <HAL_FLASH_Unlock+0x40>)
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00d      	beq.n	8008e3a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e48 <HAL_FLASH_Unlock+0x40>)
 8008e20:	4a0a      	ldr	r2, [pc, #40]	@ (8008e4c <HAL_FLASH_Unlock+0x44>)
 8008e22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008e24:	4b08      	ldr	r3, [pc, #32]	@ (8008e48 <HAL_FLASH_Unlock+0x40>)
 8008e26:	4a0a      	ldr	r2, [pc, #40]	@ (8008e50 <HAL_FLASH_Unlock+0x48>)
 8008e28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008e2a:	4b07      	ldr	r3, [pc, #28]	@ (8008e48 <HAL_FLASH_Unlock+0x40>)
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bc80      	pop	{r7}
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40022000 	.word	0x40022000
 8008e4c:	45670123 	.word	0x45670123
 8008e50:	cdef89ab 	.word	0xcdef89ab

08008e54 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008e58:	4b05      	ldr	r3, [pc, #20]	@ (8008e70 <HAL_FLASH_Lock+0x1c>)
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	4a04      	ldr	r2, [pc, #16]	@ (8008e70 <HAL_FLASH_Lock+0x1c>)
 8008e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e62:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bc80      	pop	{r7}
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40022000 	.word	0x40022000

08008e74 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8008e78:	4b02      	ldr	r3, [pc, #8]	@ (8008e84 <HAL_FLASH_GetError+0x10>)
 8008e7a:	69db      	ldr	r3, [r3, #28]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bc80      	pop	{r7}
 8008e82:	4770      	bx	lr
 8008e84:	20008098 	.word	0x20008098

08008e88 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008e94:	4b08      	ldr	r3, [pc, #32]	@ (8008eb8 <FLASH_Program_HalfWord+0x30>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008e9a:	4b08      	ldr	r3, [pc, #32]	@ (8008ebc <FLASH_Program_HalfWord+0x34>)
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	4a07      	ldr	r2, [pc, #28]	@ (8008ebc <FLASH_Program_HalfWord+0x34>)
 8008ea0:	f043 0301 	orr.w	r3, r3, #1
 8008ea4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	887a      	ldrh	r2, [r7, #2]
 8008eaa:	801a      	strh	r2, [r3, #0]
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20008098 	.word	0x20008098
 8008ebc:	40022000 	.word	0x40022000

08008ec0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8008ec8:	f7ff fcba 	bl	8008840 <HAL_GetTick>
 8008ecc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008ece:	e010      	b.n	8008ef2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed6:	d00c      	beq.n	8008ef2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d007      	beq.n	8008eee <FLASH_WaitForLastOperation+0x2e>
 8008ede:	f7ff fcaf 	bl	8008840 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d201      	bcs.n	8008ef2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e025      	b.n	8008f3e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008ef2:	4b15      	ldr	r3, [pc, #84]	@ (8008f48 <FLASH_WaitForLastOperation+0x88>)
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e8      	bne.n	8008ed0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008efe:	4b12      	ldr	r3, [pc, #72]	@ (8008f48 <FLASH_WaitForLastOperation+0x88>)
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f48 <FLASH_WaitForLastOperation+0x88>)
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008f10:	4b0d      	ldr	r3, [pc, #52]	@ (8008f48 <FLASH_WaitForLastOperation+0x88>)
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f003 0310 	and.w	r3, r3, #16
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10b      	bne.n	8008f34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f48 <FLASH_WaitForLastOperation+0x88>)
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d105      	bne.n	8008f34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008f28:	4b07      	ldr	r3, [pc, #28]	@ (8008f48 <FLASH_WaitForLastOperation+0x88>)
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008f34:	f000 f80a 	bl	8008f4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e000      	b.n	8008f3e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	40022000 	.word	0x40022000

08008f4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008f56:	4b23      	ldr	r3, [pc, #140]	@ (8008fe4 <FLASH_SetErrorCode+0x98>)
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f003 0310 	and.w	r3, r3, #16
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d009      	beq.n	8008f76 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008f62:	4b21      	ldr	r3, [pc, #132]	@ (8008fe8 <FLASH_SetErrorCode+0x9c>)
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	f043 0302 	orr.w	r3, r3, #2
 8008f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8008fe8 <FLASH_SetErrorCode+0x9c>)
 8008f6c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f043 0310 	orr.w	r3, r3, #16
 8008f74:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008f76:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe4 <FLASH_SetErrorCode+0x98>)
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f003 0304 	and.w	r3, r3, #4
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d009      	beq.n	8008f96 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008f82:	4b19      	ldr	r3, [pc, #100]	@ (8008fe8 <FLASH_SetErrorCode+0x9c>)
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f043 0301 	orr.w	r3, r3, #1
 8008f8a:	4a17      	ldr	r2, [pc, #92]	@ (8008fe8 <FLASH_SetErrorCode+0x9c>)
 8008f8c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f043 0304 	orr.w	r3, r3, #4
 8008f94:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8008f96:	4b13      	ldr	r3, [pc, #76]	@ (8008fe4 <FLASH_SetErrorCode+0x98>)
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8008fa2:	4b11      	ldr	r3, [pc, #68]	@ (8008fe8 <FLASH_SetErrorCode+0x9c>)
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	f043 0304 	orr.w	r3, r3, #4
 8008faa:	4a0f      	ldr	r2, [pc, #60]	@ (8008fe8 <FLASH_SetErrorCode+0x9c>)
 8008fac:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8008fae:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <FLASH_SetErrorCode+0x98>)
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8008fe4 <FLASH_SetErrorCode+0x98>)
 8008fb4:	f023 0301 	bic.w	r3, r3, #1
 8008fb8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f240 1201 	movw	r2, #257	@ 0x101
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d106      	bne.n	8008fd2 <FLASH_SetErrorCode+0x86>
 8008fc4:	4b07      	ldr	r3, [pc, #28]	@ (8008fe4 <FLASH_SetErrorCode+0x98>)
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	4a06      	ldr	r2, [pc, #24]	@ (8008fe4 <FLASH_SetErrorCode+0x98>)
 8008fca:	f023 0301 	bic.w	r3, r3, #1
 8008fce:	61d3      	str	r3, [r2, #28]
}  
 8008fd0:	e002      	b.n	8008fd8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8008fd2:	4a04      	ldr	r2, [pc, #16]	@ (8008fe4 <FLASH_SetErrorCode+0x98>)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60d3      	str	r3, [r2, #12]
}  
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc80      	pop	{r7}
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	40022000 	.word	0x40022000
 8008fe8:	20008098 	.word	0x20008098

08008fec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80090bc <HAL_FLASHEx_Erase+0xd0>)
 8009000:	7e1b      	ldrb	r3, [r3, #24]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d101      	bne.n	800900a <HAL_FLASHEx_Erase+0x1e>
 8009006:	2302      	movs	r3, #2
 8009008:	e053      	b.n	80090b2 <HAL_FLASHEx_Erase+0xc6>
 800900a:	4b2c      	ldr	r3, [pc, #176]	@ (80090bc <HAL_FLASHEx_Erase+0xd0>)
 800900c:	2201      	movs	r2, #1
 800900e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b02      	cmp	r3, #2
 8009016:	d116      	bne.n	8009046 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8009018:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800901c:	f7ff ff50 	bl	8008ec0 <FLASH_WaitForLastOperation>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d141      	bne.n	80090aa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8009026:	2001      	movs	r0, #1
 8009028:	f000 f84c 	bl	80090c4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800902c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009030:	f7ff ff46 	bl	8008ec0 <FLASH_WaitForLastOperation>
 8009034:	4603      	mov	r3, r0
 8009036:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8009038:	4b21      	ldr	r3, [pc, #132]	@ (80090c0 <HAL_FLASHEx_Erase+0xd4>)
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	4a20      	ldr	r2, [pc, #128]	@ (80090c0 <HAL_FLASHEx_Erase+0xd4>)
 800903e:	f023 0304 	bic.w	r3, r3, #4
 8009042:	6113      	str	r3, [r2, #16]
 8009044:	e031      	b.n	80090aa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8009046:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800904a:	f7ff ff39 	bl	8008ec0 <FLASH_WaitForLastOperation>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d12a      	bne.n	80090aa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	f04f 32ff 	mov.w	r2, #4294967295
 800905a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	e019      	b.n	8009098 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8009064:	68b8      	ldr	r0, [r7, #8]
 8009066:	f000 f849 	bl	80090fc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800906a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800906e:	f7ff ff27 	bl	8008ec0 <FLASH_WaitForLastOperation>
 8009072:	4603      	mov	r3, r0
 8009074:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009076:	4b12      	ldr	r3, [pc, #72]	@ (80090c0 <HAL_FLASHEx_Erase+0xd4>)
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	4a11      	ldr	r2, [pc, #68]	@ (80090c0 <HAL_FLASHEx_Erase+0xd4>)
 800907c:	f023 0302 	bic.w	r3, r3, #2
 8009080:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	601a      	str	r2, [r3, #0]
            break;
 800908e:	e00c      	b.n	80090aa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009096:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	02da      	lsls	r2, r3, #11
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	4413      	add	r3, r2
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d3dc      	bcc.n	8009064 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80090aa:	4b04      	ldr	r3, [pc, #16]	@ (80090bc <HAL_FLASHEx_Erase+0xd0>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	761a      	strb	r2, [r3, #24]

  return status;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20008098 	.word	0x20008098
 80090c0:	40022000 	.word	0x40022000

080090c4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80090cc:	4b09      	ldr	r3, [pc, #36]	@ (80090f4 <FLASH_MassErase+0x30>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80090d2:	4b09      	ldr	r3, [pc, #36]	@ (80090f8 <FLASH_MassErase+0x34>)
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	4a08      	ldr	r2, [pc, #32]	@ (80090f8 <FLASH_MassErase+0x34>)
 80090d8:	f043 0304 	orr.w	r3, r3, #4
 80090dc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80090de:	4b06      	ldr	r3, [pc, #24]	@ (80090f8 <FLASH_MassErase+0x34>)
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	4a05      	ldr	r2, [pc, #20]	@ (80090f8 <FLASH_MassErase+0x34>)
 80090e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090e8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr
 80090f4:	20008098 	.word	0x20008098
 80090f8:	40022000 	.word	0x40022000

080090fc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009104:	4b0b      	ldr	r3, [pc, #44]	@ (8009134 <FLASH_PageErase+0x38>)
 8009106:	2200      	movs	r2, #0
 8009108:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800910a:	4b0b      	ldr	r3, [pc, #44]	@ (8009138 <FLASH_PageErase+0x3c>)
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	4a0a      	ldr	r2, [pc, #40]	@ (8009138 <FLASH_PageErase+0x3c>)
 8009110:	f043 0302 	orr.w	r3, r3, #2
 8009114:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8009116:	4a08      	ldr	r2, [pc, #32]	@ (8009138 <FLASH_PageErase+0x3c>)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800911c:	4b06      	ldr	r3, [pc, #24]	@ (8009138 <FLASH_PageErase+0x3c>)
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	4a05      	ldr	r2, [pc, #20]	@ (8009138 <FLASH_PageErase+0x3c>)
 8009122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009126:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20008098 	.word	0x20008098
 8009138:	40022000 	.word	0x40022000

0800913c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800913c:	b480      	push	{r7}
 800913e:	b08b      	sub	sp, #44	@ 0x2c
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009146:	2300      	movs	r3, #0
 8009148:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800914a:	2300      	movs	r3, #0
 800914c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800914e:	e179      	b.n	8009444 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009150:	2201      	movs	r2, #1
 8009152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009154:	fa02 f303 	lsl.w	r3, r2, r3
 8009158:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	4013      	ands	r3, r2
 8009162:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	429a      	cmp	r2, r3
 800916a:	f040 8168 	bne.w	800943e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	4a96      	ldr	r2, [pc, #600]	@ (80093cc <HAL_GPIO_Init+0x290>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d05e      	beq.n	8009236 <HAL_GPIO_Init+0xfa>
 8009178:	4a94      	ldr	r2, [pc, #592]	@ (80093cc <HAL_GPIO_Init+0x290>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d875      	bhi.n	800926a <HAL_GPIO_Init+0x12e>
 800917e:	4a94      	ldr	r2, [pc, #592]	@ (80093d0 <HAL_GPIO_Init+0x294>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d058      	beq.n	8009236 <HAL_GPIO_Init+0xfa>
 8009184:	4a92      	ldr	r2, [pc, #584]	@ (80093d0 <HAL_GPIO_Init+0x294>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d86f      	bhi.n	800926a <HAL_GPIO_Init+0x12e>
 800918a:	4a92      	ldr	r2, [pc, #584]	@ (80093d4 <HAL_GPIO_Init+0x298>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d052      	beq.n	8009236 <HAL_GPIO_Init+0xfa>
 8009190:	4a90      	ldr	r2, [pc, #576]	@ (80093d4 <HAL_GPIO_Init+0x298>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d869      	bhi.n	800926a <HAL_GPIO_Init+0x12e>
 8009196:	4a90      	ldr	r2, [pc, #576]	@ (80093d8 <HAL_GPIO_Init+0x29c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d04c      	beq.n	8009236 <HAL_GPIO_Init+0xfa>
 800919c:	4a8e      	ldr	r2, [pc, #568]	@ (80093d8 <HAL_GPIO_Init+0x29c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d863      	bhi.n	800926a <HAL_GPIO_Init+0x12e>
 80091a2:	4a8e      	ldr	r2, [pc, #568]	@ (80093dc <HAL_GPIO_Init+0x2a0>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d046      	beq.n	8009236 <HAL_GPIO_Init+0xfa>
 80091a8:	4a8c      	ldr	r2, [pc, #560]	@ (80093dc <HAL_GPIO_Init+0x2a0>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d85d      	bhi.n	800926a <HAL_GPIO_Init+0x12e>
 80091ae:	2b12      	cmp	r3, #18
 80091b0:	d82a      	bhi.n	8009208 <HAL_GPIO_Init+0xcc>
 80091b2:	2b12      	cmp	r3, #18
 80091b4:	d859      	bhi.n	800926a <HAL_GPIO_Init+0x12e>
 80091b6:	a201      	add	r2, pc, #4	@ (adr r2, 80091bc <HAL_GPIO_Init+0x80>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	08009237 	.word	0x08009237
 80091c0:	08009211 	.word	0x08009211
 80091c4:	08009223 	.word	0x08009223
 80091c8:	08009265 	.word	0x08009265
 80091cc:	0800926b 	.word	0x0800926b
 80091d0:	0800926b 	.word	0x0800926b
 80091d4:	0800926b 	.word	0x0800926b
 80091d8:	0800926b 	.word	0x0800926b
 80091dc:	0800926b 	.word	0x0800926b
 80091e0:	0800926b 	.word	0x0800926b
 80091e4:	0800926b 	.word	0x0800926b
 80091e8:	0800926b 	.word	0x0800926b
 80091ec:	0800926b 	.word	0x0800926b
 80091f0:	0800926b 	.word	0x0800926b
 80091f4:	0800926b 	.word	0x0800926b
 80091f8:	0800926b 	.word	0x0800926b
 80091fc:	0800926b 	.word	0x0800926b
 8009200:	08009219 	.word	0x08009219
 8009204:	0800922d 	.word	0x0800922d
 8009208:	4a75      	ldr	r2, [pc, #468]	@ (80093e0 <HAL_GPIO_Init+0x2a4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d013      	beq.n	8009236 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800920e:	e02c      	b.n	800926a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	623b      	str	r3, [r7, #32]
          break;
 8009216:	e029      	b.n	800926c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	3304      	adds	r3, #4
 800921e:	623b      	str	r3, [r7, #32]
          break;
 8009220:	e024      	b.n	800926c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	3308      	adds	r3, #8
 8009228:	623b      	str	r3, [r7, #32]
          break;
 800922a:	e01f      	b.n	800926c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	330c      	adds	r3, #12
 8009232:	623b      	str	r3, [r7, #32]
          break;
 8009234:	e01a      	b.n	800926c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800923e:	2304      	movs	r3, #4
 8009240:	623b      	str	r3, [r7, #32]
          break;
 8009242:	e013      	b.n	800926c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d105      	bne.n	8009258 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800924c:	2308      	movs	r3, #8
 800924e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	69fa      	ldr	r2, [r7, #28]
 8009254:	611a      	str	r2, [r3, #16]
          break;
 8009256:	e009      	b.n	800926c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009258:	2308      	movs	r3, #8
 800925a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	615a      	str	r2, [r3, #20]
          break;
 8009262:	e003      	b.n	800926c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009264:	2300      	movs	r3, #0
 8009266:	623b      	str	r3, [r7, #32]
          break;
 8009268:	e000      	b.n	800926c <HAL_GPIO_Init+0x130>
          break;
 800926a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	2bff      	cmp	r3, #255	@ 0xff
 8009270:	d801      	bhi.n	8009276 <HAL_GPIO_Init+0x13a>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	e001      	b.n	800927a <HAL_GPIO_Init+0x13e>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3304      	adds	r3, #4
 800927a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2bff      	cmp	r3, #255	@ 0xff
 8009280:	d802      	bhi.n	8009288 <HAL_GPIO_Init+0x14c>
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	e002      	b.n	800928e <HAL_GPIO_Init+0x152>
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	3b08      	subs	r3, #8
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	210f      	movs	r1, #15
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	fa01 f303 	lsl.w	r3, r1, r3
 800929c:	43db      	mvns	r3, r3
 800929e:	401a      	ands	r2, r3
 80092a0:	6a39      	ldr	r1, [r7, #32]
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	fa01 f303 	lsl.w	r3, r1, r3
 80092a8:	431a      	orrs	r2, r3
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 80c1 	beq.w	800943e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80092bc:	4b49      	ldr	r3, [pc, #292]	@ (80093e4 <HAL_GPIO_Init+0x2a8>)
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	4a48      	ldr	r2, [pc, #288]	@ (80093e4 <HAL_GPIO_Init+0x2a8>)
 80092c2:	f043 0301 	orr.w	r3, r3, #1
 80092c6:	6193      	str	r3, [r2, #24]
 80092c8:	4b46      	ldr	r3, [pc, #280]	@ (80093e4 <HAL_GPIO_Init+0x2a8>)
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	60bb      	str	r3, [r7, #8]
 80092d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80092d4:	4a44      	ldr	r2, [pc, #272]	@ (80093e8 <HAL_GPIO_Init+0x2ac>)
 80092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d8:	089b      	lsrs	r3, r3, #2
 80092da:	3302      	adds	r3, #2
 80092dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80092e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	220f      	movs	r2, #15
 80092ec:	fa02 f303 	lsl.w	r3, r2, r3
 80092f0:	43db      	mvns	r3, r3
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	4013      	ands	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a3c      	ldr	r2, [pc, #240]	@ (80093ec <HAL_GPIO_Init+0x2b0>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d01f      	beq.n	8009340 <HAL_GPIO_Init+0x204>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a3b      	ldr	r2, [pc, #236]	@ (80093f0 <HAL_GPIO_Init+0x2b4>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d019      	beq.n	800933c <HAL_GPIO_Init+0x200>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a3a      	ldr	r2, [pc, #232]	@ (80093f4 <HAL_GPIO_Init+0x2b8>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d013      	beq.n	8009338 <HAL_GPIO_Init+0x1fc>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a39      	ldr	r2, [pc, #228]	@ (80093f8 <HAL_GPIO_Init+0x2bc>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d00d      	beq.n	8009334 <HAL_GPIO_Init+0x1f8>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a38      	ldr	r2, [pc, #224]	@ (80093fc <HAL_GPIO_Init+0x2c0>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d007      	beq.n	8009330 <HAL_GPIO_Init+0x1f4>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a37      	ldr	r2, [pc, #220]	@ (8009400 <HAL_GPIO_Init+0x2c4>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d101      	bne.n	800932c <HAL_GPIO_Init+0x1f0>
 8009328:	2305      	movs	r3, #5
 800932a:	e00a      	b.n	8009342 <HAL_GPIO_Init+0x206>
 800932c:	2306      	movs	r3, #6
 800932e:	e008      	b.n	8009342 <HAL_GPIO_Init+0x206>
 8009330:	2304      	movs	r3, #4
 8009332:	e006      	b.n	8009342 <HAL_GPIO_Init+0x206>
 8009334:	2303      	movs	r3, #3
 8009336:	e004      	b.n	8009342 <HAL_GPIO_Init+0x206>
 8009338:	2302      	movs	r3, #2
 800933a:	e002      	b.n	8009342 <HAL_GPIO_Init+0x206>
 800933c:	2301      	movs	r3, #1
 800933e:	e000      	b.n	8009342 <HAL_GPIO_Init+0x206>
 8009340:	2300      	movs	r3, #0
 8009342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009344:	f002 0203 	and.w	r2, r2, #3
 8009348:	0092      	lsls	r2, r2, #2
 800934a:	4093      	lsls	r3, r2
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009352:	4925      	ldr	r1, [pc, #148]	@ (80093e8 <HAL_GPIO_Init+0x2ac>)
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009356:	089b      	lsrs	r3, r3, #2
 8009358:	3302      	adds	r3, #2
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d006      	beq.n	800937a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800936c:	4b25      	ldr	r3, [pc, #148]	@ (8009404 <HAL_GPIO_Init+0x2c8>)
 800936e:	689a      	ldr	r2, [r3, #8]
 8009370:	4924      	ldr	r1, [pc, #144]	@ (8009404 <HAL_GPIO_Init+0x2c8>)
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	4313      	orrs	r3, r2
 8009376:	608b      	str	r3, [r1, #8]
 8009378:	e006      	b.n	8009388 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800937a:	4b22      	ldr	r3, [pc, #136]	@ (8009404 <HAL_GPIO_Init+0x2c8>)
 800937c:	689a      	ldr	r2, [r3, #8]
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	43db      	mvns	r3, r3
 8009382:	4920      	ldr	r1, [pc, #128]	@ (8009404 <HAL_GPIO_Init+0x2c8>)
 8009384:	4013      	ands	r3, r2
 8009386:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d006      	beq.n	80093a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009394:	4b1b      	ldr	r3, [pc, #108]	@ (8009404 <HAL_GPIO_Init+0x2c8>)
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	491a      	ldr	r1, [pc, #104]	@ (8009404 <HAL_GPIO_Init+0x2c8>)
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	4313      	orrs	r3, r2
 800939e:	60cb      	str	r3, [r1, #12]
 80093a0:	e006      	b.n	80093b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80093a2:	4b18      	ldr	r3, [pc, #96]	@ (8009404 <HAL_GPIO_Init+0x2c8>)
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	43db      	mvns	r3, r3
 80093aa:	4916      	ldr	r1, [pc, #88]	@ (8009404 <HAL_GPIO_Init+0x2c8>)
 80093ac:	4013      	ands	r3, r2
 80093ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d025      	beq.n	8009408 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80093bc:	4b11      	ldr	r3, [pc, #68]	@ (8009404 <HAL_GPIO_Init+0x2c8>)
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	4910      	ldr	r1, [pc, #64]	@ (8009404 <HAL_GPIO_Init+0x2c8>)
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	604b      	str	r3, [r1, #4]
 80093c8:	e025      	b.n	8009416 <HAL_GPIO_Init+0x2da>
 80093ca:	bf00      	nop
 80093cc:	10320000 	.word	0x10320000
 80093d0:	10310000 	.word	0x10310000
 80093d4:	10220000 	.word	0x10220000
 80093d8:	10210000 	.word	0x10210000
 80093dc:	10120000 	.word	0x10120000
 80093e0:	10110000 	.word	0x10110000
 80093e4:	40021000 	.word	0x40021000
 80093e8:	40010000 	.word	0x40010000
 80093ec:	40010800 	.word	0x40010800
 80093f0:	40010c00 	.word	0x40010c00
 80093f4:	40011000 	.word	0x40011000
 80093f8:	40011400 	.word	0x40011400
 80093fc:	40011800 	.word	0x40011800
 8009400:	40011c00 	.word	0x40011c00
 8009404:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009408:	4b15      	ldr	r3, [pc, #84]	@ (8009460 <HAL_GPIO_Init+0x324>)
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	43db      	mvns	r3, r3
 8009410:	4913      	ldr	r1, [pc, #76]	@ (8009460 <HAL_GPIO_Init+0x324>)
 8009412:	4013      	ands	r3, r2
 8009414:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d006      	beq.n	8009430 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009422:	4b0f      	ldr	r3, [pc, #60]	@ (8009460 <HAL_GPIO_Init+0x324>)
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	490e      	ldr	r1, [pc, #56]	@ (8009460 <HAL_GPIO_Init+0x324>)
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	4313      	orrs	r3, r2
 800942c:	600b      	str	r3, [r1, #0]
 800942e:	e006      	b.n	800943e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009430:	4b0b      	ldr	r3, [pc, #44]	@ (8009460 <HAL_GPIO_Init+0x324>)
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	43db      	mvns	r3, r3
 8009438:	4909      	ldr	r1, [pc, #36]	@ (8009460 <HAL_GPIO_Init+0x324>)
 800943a:	4013      	ands	r3, r2
 800943c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	3301      	adds	r3, #1
 8009442:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944a:	fa22 f303 	lsr.w	r3, r2, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	f47f ae7e 	bne.w	8009150 <HAL_GPIO_Init+0x14>
  }
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop
 8009458:	372c      	adds	r7, #44	@ 0x2c
 800945a:	46bd      	mov	sp, r7
 800945c:	bc80      	pop	{r7}
 800945e:	4770      	bx	lr
 8009460:	40010400 	.word	0x40010400

08009464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e272      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 8087 	beq.w	8009592 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009484:	4b92      	ldr	r3, [pc, #584]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f003 030c 	and.w	r3, r3, #12
 800948c:	2b04      	cmp	r3, #4
 800948e:	d00c      	beq.n	80094aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009490:	4b8f      	ldr	r3, [pc, #572]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f003 030c 	and.w	r3, r3, #12
 8009498:	2b08      	cmp	r3, #8
 800949a:	d112      	bne.n	80094c2 <HAL_RCC_OscConfig+0x5e>
 800949c:	4b8c      	ldr	r3, [pc, #560]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094a8:	d10b      	bne.n	80094c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094aa:	4b89      	ldr	r3, [pc, #548]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d06c      	beq.n	8009590 <HAL_RCC_OscConfig+0x12c>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d168      	bne.n	8009590 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e24c      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094ca:	d106      	bne.n	80094da <HAL_RCC_OscConfig+0x76>
 80094cc:	4b80      	ldr	r3, [pc, #512]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a7f      	ldr	r2, [pc, #508]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80094d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	e02e      	b.n	8009538 <HAL_RCC_OscConfig+0xd4>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10c      	bne.n	80094fc <HAL_RCC_OscConfig+0x98>
 80094e2:	4b7b      	ldr	r3, [pc, #492]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a7a      	ldr	r2, [pc, #488]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80094e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	4b78      	ldr	r3, [pc, #480]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a77      	ldr	r2, [pc, #476]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80094f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	e01d      	b.n	8009538 <HAL_RCC_OscConfig+0xd4>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009504:	d10c      	bne.n	8009520 <HAL_RCC_OscConfig+0xbc>
 8009506:	4b72      	ldr	r3, [pc, #456]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a71      	ldr	r2, [pc, #452]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 800950c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	4b6f      	ldr	r3, [pc, #444]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a6e      	ldr	r2, [pc, #440]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	e00b      	b.n	8009538 <HAL_RCC_OscConfig+0xd4>
 8009520:	4b6b      	ldr	r3, [pc, #428]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a6a      	ldr	r2, [pc, #424]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	4b68      	ldr	r3, [pc, #416]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a67      	ldr	r2, [pc, #412]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009536:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d013      	beq.n	8009568 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009540:	f7ff f97e 	bl	8008840 <HAL_GetTick>
 8009544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009546:	e008      	b.n	800955a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009548:	f7ff f97a 	bl	8008840 <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	2b64      	cmp	r3, #100	@ 0x64
 8009554:	d901      	bls.n	800955a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e200      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800955a:	4b5d      	ldr	r3, [pc, #372]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0f0      	beq.n	8009548 <HAL_RCC_OscConfig+0xe4>
 8009566:	e014      	b.n	8009592 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009568:	f7ff f96a 	bl	8008840 <HAL_GetTick>
 800956c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800956e:	e008      	b.n	8009582 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009570:	f7ff f966 	bl	8008840 <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	2b64      	cmp	r3, #100	@ 0x64
 800957c:	d901      	bls.n	8009582 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e1ec      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009582:	4b53      	ldr	r3, [pc, #332]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1f0      	bne.n	8009570 <HAL_RCC_OscConfig+0x10c>
 800958e:	e000      	b.n	8009592 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0302 	and.w	r3, r3, #2
 800959a:	2b00      	cmp	r3, #0
 800959c:	d063      	beq.n	8009666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800959e:	4b4c      	ldr	r3, [pc, #304]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	f003 030c 	and.w	r3, r3, #12
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80095aa:	4b49      	ldr	r3, [pc, #292]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f003 030c 	and.w	r3, r3, #12
 80095b2:	2b08      	cmp	r3, #8
 80095b4:	d11c      	bne.n	80095f0 <HAL_RCC_OscConfig+0x18c>
 80095b6:	4b46      	ldr	r3, [pc, #280]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d116      	bne.n	80095f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095c2:	4b43      	ldr	r3, [pc, #268]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d005      	beq.n	80095da <HAL_RCC_OscConfig+0x176>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d001      	beq.n	80095da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e1c0      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095da:	4b3d      	ldr	r3, [pc, #244]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	4939      	ldr	r1, [pc, #228]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095ee:	e03a      	b.n	8009666 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d020      	beq.n	800963a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095f8:	4b36      	ldr	r3, [pc, #216]	@ (80096d4 <HAL_RCC_OscConfig+0x270>)
 80095fa:	2201      	movs	r2, #1
 80095fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095fe:	f7ff f91f 	bl	8008840 <HAL_GetTick>
 8009602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009604:	e008      	b.n	8009618 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009606:	f7ff f91b 	bl	8008840 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	2b02      	cmp	r3, #2
 8009612:	d901      	bls.n	8009618 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e1a1      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009618:	4b2d      	ldr	r3, [pc, #180]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0f0      	beq.n	8009606 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009624:	4b2a      	ldr	r3, [pc, #168]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	695b      	ldr	r3, [r3, #20]
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	4927      	ldr	r1, [pc, #156]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 8009634:	4313      	orrs	r3, r2
 8009636:	600b      	str	r3, [r1, #0]
 8009638:	e015      	b.n	8009666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800963a:	4b26      	ldr	r3, [pc, #152]	@ (80096d4 <HAL_RCC_OscConfig+0x270>)
 800963c:	2200      	movs	r2, #0
 800963e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009640:	f7ff f8fe 	bl	8008840 <HAL_GetTick>
 8009644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009646:	e008      	b.n	800965a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009648:	f7ff f8fa 	bl	8008840 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	2b02      	cmp	r3, #2
 8009654:	d901      	bls.n	800965a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e180      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800965a:	4b1d      	ldr	r3, [pc, #116]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0302 	and.w	r3, r3, #2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1f0      	bne.n	8009648 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0308 	and.w	r3, r3, #8
 800966e:	2b00      	cmp	r3, #0
 8009670:	d03a      	beq.n	80096e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d019      	beq.n	80096ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800967a:	4b17      	ldr	r3, [pc, #92]	@ (80096d8 <HAL_RCC_OscConfig+0x274>)
 800967c:	2201      	movs	r2, #1
 800967e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009680:	f7ff f8de 	bl	8008840 <HAL_GetTick>
 8009684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009686:	e008      	b.n	800969a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009688:	f7ff f8da 	bl	8008840 <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	2b02      	cmp	r3, #2
 8009694:	d901      	bls.n	800969a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e160      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800969a:	4b0d      	ldr	r3, [pc, #52]	@ (80096d0 <HAL_RCC_OscConfig+0x26c>)
 800969c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d0f0      	beq.n	8009688 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80096a6:	2001      	movs	r0, #1
 80096a8:	f000 fad0 	bl	8009c4c <RCC_Delay>
 80096ac:	e01c      	b.n	80096e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096ae:	4b0a      	ldr	r3, [pc, #40]	@ (80096d8 <HAL_RCC_OscConfig+0x274>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096b4:	f7ff f8c4 	bl	8008840 <HAL_GetTick>
 80096b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096ba:	e00f      	b.n	80096dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096bc:	f7ff f8c0 	bl	8008840 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d908      	bls.n	80096dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e146      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
 80096ce:	bf00      	nop
 80096d0:	40021000 	.word	0x40021000
 80096d4:	42420000 	.word	0x42420000
 80096d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096dc:	4b92      	ldr	r3, [pc, #584]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80096de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e9      	bne.n	80096bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 80a6 	beq.w	8009842 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096f6:	2300      	movs	r3, #0
 80096f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096fa:	4b8b      	ldr	r3, [pc, #556]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10d      	bne.n	8009722 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009706:	4b88      	ldr	r3, [pc, #544]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	4a87      	ldr	r2, [pc, #540]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 800970c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009710:	61d3      	str	r3, [r2, #28]
 8009712:	4b85      	ldr	r3, [pc, #532]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800971a:	60bb      	str	r3, [r7, #8]
 800971c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800971e:	2301      	movs	r3, #1
 8009720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009722:	4b82      	ldr	r3, [pc, #520]	@ (800992c <HAL_RCC_OscConfig+0x4c8>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800972a:	2b00      	cmp	r3, #0
 800972c:	d118      	bne.n	8009760 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800972e:	4b7f      	ldr	r3, [pc, #508]	@ (800992c <HAL_RCC_OscConfig+0x4c8>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a7e      	ldr	r2, [pc, #504]	@ (800992c <HAL_RCC_OscConfig+0x4c8>)
 8009734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800973a:	f7ff f881 	bl	8008840 <HAL_GetTick>
 800973e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009740:	e008      	b.n	8009754 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009742:	f7ff f87d 	bl	8008840 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	2b64      	cmp	r3, #100	@ 0x64
 800974e:	d901      	bls.n	8009754 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e103      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009754:	4b75      	ldr	r3, [pc, #468]	@ (800992c <HAL_RCC_OscConfig+0x4c8>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800975c:	2b00      	cmp	r3, #0
 800975e:	d0f0      	beq.n	8009742 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d106      	bne.n	8009776 <HAL_RCC_OscConfig+0x312>
 8009768:	4b6f      	ldr	r3, [pc, #444]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 800976a:	6a1b      	ldr	r3, [r3, #32]
 800976c:	4a6e      	ldr	r2, [pc, #440]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 800976e:	f043 0301 	orr.w	r3, r3, #1
 8009772:	6213      	str	r3, [r2, #32]
 8009774:	e02d      	b.n	80097d2 <HAL_RCC_OscConfig+0x36e>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10c      	bne.n	8009798 <HAL_RCC_OscConfig+0x334>
 800977e:	4b6a      	ldr	r3, [pc, #424]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	4a69      	ldr	r2, [pc, #420]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 8009784:	f023 0301 	bic.w	r3, r3, #1
 8009788:	6213      	str	r3, [r2, #32]
 800978a:	4b67      	ldr	r3, [pc, #412]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	4a66      	ldr	r2, [pc, #408]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 8009790:	f023 0304 	bic.w	r3, r3, #4
 8009794:	6213      	str	r3, [r2, #32]
 8009796:	e01c      	b.n	80097d2 <HAL_RCC_OscConfig+0x36e>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	2b05      	cmp	r3, #5
 800979e:	d10c      	bne.n	80097ba <HAL_RCC_OscConfig+0x356>
 80097a0:	4b61      	ldr	r3, [pc, #388]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	4a60      	ldr	r2, [pc, #384]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80097a6:	f043 0304 	orr.w	r3, r3, #4
 80097aa:	6213      	str	r3, [r2, #32]
 80097ac:	4b5e      	ldr	r3, [pc, #376]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	4a5d      	ldr	r2, [pc, #372]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80097b2:	f043 0301 	orr.w	r3, r3, #1
 80097b6:	6213      	str	r3, [r2, #32]
 80097b8:	e00b      	b.n	80097d2 <HAL_RCC_OscConfig+0x36e>
 80097ba:	4b5b      	ldr	r3, [pc, #364]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	4a5a      	ldr	r2, [pc, #360]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80097c0:	f023 0301 	bic.w	r3, r3, #1
 80097c4:	6213      	str	r3, [r2, #32]
 80097c6:	4b58      	ldr	r3, [pc, #352]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	4a57      	ldr	r2, [pc, #348]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80097cc:	f023 0304 	bic.w	r3, r3, #4
 80097d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d015      	beq.n	8009806 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097da:	f7ff f831 	bl	8008840 <HAL_GetTick>
 80097de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097e0:	e00a      	b.n	80097f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097e2:	f7ff f82d 	bl	8008840 <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d901      	bls.n	80097f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e0b1      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097f8:	4b4b      	ldr	r3, [pc, #300]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d0ee      	beq.n	80097e2 <HAL_RCC_OscConfig+0x37e>
 8009804:	e014      	b.n	8009830 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009806:	f7ff f81b 	bl	8008840 <HAL_GetTick>
 800980a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800980c:	e00a      	b.n	8009824 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800980e:	f7ff f817 	bl	8008840 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800981c:	4293      	cmp	r3, r2
 800981e:	d901      	bls.n	8009824 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e09b      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009824:	4b40      	ldr	r3, [pc, #256]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1ee      	bne.n	800980e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d105      	bne.n	8009842 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009836:	4b3c      	ldr	r3, [pc, #240]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	4a3b      	ldr	r2, [pc, #236]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 800983c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009840:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 8087 	beq.w	800995a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800984c:	4b36      	ldr	r3, [pc, #216]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	f003 030c 	and.w	r3, r3, #12
 8009854:	2b08      	cmp	r3, #8
 8009856:	d061      	beq.n	800991c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	2b02      	cmp	r3, #2
 800985e:	d146      	bne.n	80098ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009860:	4b33      	ldr	r3, [pc, #204]	@ (8009930 <HAL_RCC_OscConfig+0x4cc>)
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009866:	f7fe ffeb 	bl	8008840 <HAL_GetTick>
 800986a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800986c:	e008      	b.n	8009880 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800986e:	f7fe ffe7 	bl	8008840 <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	2b02      	cmp	r3, #2
 800987a:	d901      	bls.n	8009880 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	e06d      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009880:	4b29      	ldr	r3, [pc, #164]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1f0      	bne.n	800986e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009894:	d108      	bne.n	80098a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009896:	4b24      	ldr	r3, [pc, #144]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	4921      	ldr	r1, [pc, #132]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098a8:	4b1f      	ldr	r3, [pc, #124]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a19      	ldr	r1, [r3, #32]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b8:	430b      	orrs	r3, r1
 80098ba:	491b      	ldr	r1, [pc, #108]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098c0:	4b1b      	ldr	r3, [pc, #108]	@ (8009930 <HAL_RCC_OscConfig+0x4cc>)
 80098c2:	2201      	movs	r2, #1
 80098c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098c6:	f7fe ffbb 	bl	8008840 <HAL_GetTick>
 80098ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80098cc:	e008      	b.n	80098e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ce:	f7fe ffb7 	bl	8008840 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d901      	bls.n	80098e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e03d      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80098e0:	4b11      	ldr	r3, [pc, #68]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d0f0      	beq.n	80098ce <HAL_RCC_OscConfig+0x46a>
 80098ec:	e035      	b.n	800995a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ee:	4b10      	ldr	r3, [pc, #64]	@ (8009930 <HAL_RCC_OscConfig+0x4cc>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098f4:	f7fe ffa4 	bl	8008840 <HAL_GetTick>
 80098f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80098fa:	e008      	b.n	800990e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098fc:	f7fe ffa0 	bl	8008840 <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	2b02      	cmp	r3, #2
 8009908:	d901      	bls.n	800990e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e026      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800990e:	4b06      	ldr	r3, [pc, #24]	@ (8009928 <HAL_RCC_OscConfig+0x4c4>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1f0      	bne.n	80098fc <HAL_RCC_OscConfig+0x498>
 800991a:	e01e      	b.n	800995a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d107      	bne.n	8009934 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e019      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
 8009928:	40021000 	.word	0x40021000
 800992c:	40007000 	.word	0x40007000
 8009930:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009934:	4b0b      	ldr	r3, [pc, #44]	@ (8009964 <HAL_RCC_OscConfig+0x500>)
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	429a      	cmp	r2, r3
 8009946:	d106      	bne.n	8009956 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009952:	429a      	cmp	r2, r3
 8009954:	d001      	beq.n	800995a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e000      	b.n	800995c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	40021000 	.word	0x40021000

08009968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e0d0      	b.n	8009b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800997c:	4b6a      	ldr	r3, [pc, #424]	@ (8009b28 <HAL_RCC_ClockConfig+0x1c0>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 0307 	and.w	r3, r3, #7
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d910      	bls.n	80099ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800998a:	4b67      	ldr	r3, [pc, #412]	@ (8009b28 <HAL_RCC_ClockConfig+0x1c0>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f023 0207 	bic.w	r2, r3, #7
 8009992:	4965      	ldr	r1, [pc, #404]	@ (8009b28 <HAL_RCC_ClockConfig+0x1c0>)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	4313      	orrs	r3, r2
 8009998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800999a:	4b63      	ldr	r3, [pc, #396]	@ (8009b28 <HAL_RCC_ClockConfig+0x1c0>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d001      	beq.n	80099ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e0b8      	b.n	8009b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0302 	and.w	r3, r3, #2
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d020      	beq.n	80099fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 0304 	and.w	r3, r3, #4
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099c4:	4b59      	ldr	r3, [pc, #356]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	4a58      	ldr	r2, [pc, #352]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 80099ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80099ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0308 	and.w	r3, r3, #8
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80099dc:	4b53      	ldr	r3, [pc, #332]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	4a52      	ldr	r2, [pc, #328]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 80099e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80099e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099e8:	4b50      	ldr	r3, [pc, #320]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	494d      	ldr	r1, [pc, #308]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d040      	beq.n	8009a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d107      	bne.n	8009a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a0e:	4b47      	ldr	r3, [pc, #284]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d115      	bne.n	8009a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e07f      	b.n	8009b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d107      	bne.n	8009a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a26:	4b41      	ldr	r3, [pc, #260]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d109      	bne.n	8009a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e073      	b.n	8009b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a36:	4b3d      	ldr	r3, [pc, #244]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e06b      	b.n	8009b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a46:	4b39      	ldr	r3, [pc, #228]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	f023 0203 	bic.w	r2, r3, #3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	4936      	ldr	r1, [pc, #216]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a58:	f7fe fef2 	bl	8008840 <HAL_GetTick>
 8009a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a5e:	e00a      	b.n	8009a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a60:	f7fe feee 	bl	8008840 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e053      	b.n	8009b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a76:	4b2d      	ldr	r3, [pc, #180]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f003 020c 	and.w	r2, r3, #12
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d1eb      	bne.n	8009a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a88:	4b27      	ldr	r3, [pc, #156]	@ (8009b28 <HAL_RCC_ClockConfig+0x1c0>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0307 	and.w	r3, r3, #7
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d210      	bcs.n	8009ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a96:	4b24      	ldr	r3, [pc, #144]	@ (8009b28 <HAL_RCC_ClockConfig+0x1c0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f023 0207 	bic.w	r2, r3, #7
 8009a9e:	4922      	ldr	r1, [pc, #136]	@ (8009b28 <HAL_RCC_ClockConfig+0x1c0>)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aa6:	4b20      	ldr	r3, [pc, #128]	@ (8009b28 <HAL_RCC_ClockConfig+0x1c0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d001      	beq.n	8009ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e032      	b.n	8009b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d008      	beq.n	8009ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ac4:	4b19      	ldr	r3, [pc, #100]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	4916      	ldr	r1, [pc, #88]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0308 	and.w	r3, r3, #8
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d009      	beq.n	8009af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009ae2:	4b12      	ldr	r3, [pc, #72]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	00db      	lsls	r3, r3, #3
 8009af0:	490e      	ldr	r1, [pc, #56]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009af6:	f000 f821 	bl	8009b3c <HAL_RCC_GetSysClockFreq>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4b0b      	ldr	r3, [pc, #44]	@ (8009b2c <HAL_RCC_ClockConfig+0x1c4>)
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	091b      	lsrs	r3, r3, #4
 8009b02:	f003 030f 	and.w	r3, r3, #15
 8009b06:	490a      	ldr	r1, [pc, #40]	@ (8009b30 <HAL_RCC_ClockConfig+0x1c8>)
 8009b08:	5ccb      	ldrb	r3, [r1, r3]
 8009b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b0e:	4a09      	ldr	r2, [pc, #36]	@ (8009b34 <HAL_RCC_ClockConfig+0x1cc>)
 8009b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009b12:	4b09      	ldr	r3, [pc, #36]	@ (8009b38 <HAL_RCC_ClockConfig+0x1d0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe fe50 	bl	80087bc <HAL_InitTick>

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	40022000 	.word	0x40022000
 8009b2c:	40021000 	.word	0x40021000
 8009b30:	0800a9d4 	.word	0x0800a9d4
 8009b34:	2000000c 	.word	0x2000000c
 8009b38:	20000010 	.word	0x20000010

08009b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	2300      	movs	r3, #0
 8009b48:	60bb      	str	r3, [r7, #8]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	617b      	str	r3, [r7, #20]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009b56:	4b1e      	ldr	r3, [pc, #120]	@ (8009bd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f003 030c 	and.w	r3, r3, #12
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	d002      	beq.n	8009b6c <HAL_RCC_GetSysClockFreq+0x30>
 8009b66:	2b08      	cmp	r3, #8
 8009b68:	d003      	beq.n	8009b72 <HAL_RCC_GetSysClockFreq+0x36>
 8009b6a:	e027      	b.n	8009bbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009b6c:	4b19      	ldr	r3, [pc, #100]	@ (8009bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8009b6e:	613b      	str	r3, [r7, #16]
      break;
 8009b70:	e027      	b.n	8009bc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	0c9b      	lsrs	r3, r3, #18
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	4a17      	ldr	r2, [pc, #92]	@ (8009bd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009b7c:	5cd3      	ldrb	r3, [r2, r3]
 8009b7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d010      	beq.n	8009bac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009b8a:	4b11      	ldr	r3, [pc, #68]	@ (8009bd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	0c5b      	lsrs	r3, r3, #17
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	4a11      	ldr	r2, [pc, #68]	@ (8009bdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8009b96:	5cd3      	ldrb	r3, [r2, r3]
 8009b98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8009bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8009b9e:	fb03 f202 	mul.w	r2, r3, r2
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba8:	617b      	str	r3, [r7, #20]
 8009baa:	e004      	b.n	8009bb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a0c      	ldr	r2, [pc, #48]	@ (8009be0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009bb0:	fb02 f303 	mul.w	r3, r2, r3
 8009bb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	613b      	str	r3, [r7, #16]
      break;
 8009bba:	e002      	b.n	8009bc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009bbc:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8009bbe:	613b      	str	r3, [r7, #16]
      break;
 8009bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009bc2:	693b      	ldr	r3, [r7, #16]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	371c      	adds	r7, #28
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bc80      	pop	{r7}
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	40021000 	.word	0x40021000
 8009bd4:	00f42400 	.word	0x00f42400
 8009bd8:	0800a9ec 	.word	0x0800a9ec
 8009bdc:	0800a9fc 	.word	0x0800a9fc
 8009be0:	003d0900 	.word	0x003d0900
 8009be4:	007a1200 	.word	0x007a1200

08009be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009be8:	b480      	push	{r7}
 8009bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bec:	4b02      	ldr	r3, [pc, #8]	@ (8009bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8009bee:	681b      	ldr	r3, [r3, #0]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bc80      	pop	{r7}
 8009bf6:	4770      	bx	lr
 8009bf8:	2000000c 	.word	0x2000000c

08009bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009c00:	f7ff fff2 	bl	8009be8 <HAL_RCC_GetHCLKFreq>
 8009c04:	4602      	mov	r2, r0
 8009c06:	4b05      	ldr	r3, [pc, #20]	@ (8009c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	0a1b      	lsrs	r3, r3, #8
 8009c0c:	f003 0307 	and.w	r3, r3, #7
 8009c10:	4903      	ldr	r1, [pc, #12]	@ (8009c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c12:	5ccb      	ldrb	r3, [r1, r3]
 8009c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	40021000 	.word	0x40021000
 8009c20:	0800a9e4 	.word	0x0800a9e4

08009c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009c28:	f7ff ffde 	bl	8009be8 <HAL_RCC_GetHCLKFreq>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	4b05      	ldr	r3, [pc, #20]	@ (8009c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	0adb      	lsrs	r3, r3, #11
 8009c34:	f003 0307 	and.w	r3, r3, #7
 8009c38:	4903      	ldr	r1, [pc, #12]	@ (8009c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c3a:	5ccb      	ldrb	r3, [r1, r3]
 8009c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	40021000 	.word	0x40021000
 8009c48:	0800a9e4 	.word	0x0800a9e4

08009c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009c54:	4b0a      	ldr	r3, [pc, #40]	@ (8009c80 <RCC_Delay+0x34>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a0a      	ldr	r2, [pc, #40]	@ (8009c84 <RCC_Delay+0x38>)
 8009c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c5e:	0a5b      	lsrs	r3, r3, #9
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	fb02 f303 	mul.w	r3, r2, r3
 8009c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009c68:	bf00      	nop
  }
  while (Delay --);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	1e5a      	subs	r2, r3, #1
 8009c6e:	60fa      	str	r2, [r7, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1f9      	bne.n	8009c68 <RCC_Delay+0x1c>
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bc80      	pop	{r7}
 8009c7e:	4770      	bx	lr
 8009c80:	2000000c 	.word	0x2000000c
 8009c84:	10624dd3 	.word	0x10624dd3

08009c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e042      	b.n	8009d20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d106      	bne.n	8009cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7fe fcb8 	bl	8008624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2224      	movs	r2, #36	@ 0x24
 8009cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fdb7 	bl	800a840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	691a      	ldr	r2, [r3, #16]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	695a      	ldr	r2, [r3, #20]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68da      	ldr	r2, [r3, #12]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	@ 0x28
 8009d2c:	af02      	add	r7, sp, #8
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	4613      	mov	r3, r2
 8009d36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b20      	cmp	r3, #32
 8009d46:	d175      	bne.n	8009e34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <HAL_UART_Transmit+0x2c>
 8009d4e:	88fb      	ldrh	r3, [r7, #6]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e06e      	b.n	8009e36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2221      	movs	r2, #33	@ 0x21
 8009d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d66:	f7fe fd6b 	bl	8008840 <HAL_GetTick>
 8009d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	88fa      	ldrh	r2, [r7, #6]
 8009d70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	88fa      	ldrh	r2, [r7, #6]
 8009d76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d80:	d108      	bne.n	8009d94 <HAL_UART_Transmit+0x6c>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d104      	bne.n	8009d94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	61bb      	str	r3, [r7, #24]
 8009d92:	e003      	b.n	8009d9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d9c:	e02e      	b.n	8009dfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2200      	movs	r2, #0
 8009da6:	2180      	movs	r1, #128	@ 0x80
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f000 fb1c 	bl	800a3e6 <UART_WaitOnFlagUntilTimeout>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d005      	beq.n	8009dc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e03a      	b.n	8009e36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10b      	bne.n	8009dde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	3302      	adds	r3, #2
 8009dda:	61bb      	str	r3, [r7, #24]
 8009ddc:	e007      	b.n	8009dee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	781a      	ldrb	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	3301      	adds	r3, #1
 8009dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	3b01      	subs	r3, #1
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1cb      	bne.n	8009d9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2140      	movs	r1, #64	@ 0x40
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 fae8 	bl	800a3e6 <UART_WaitOnFlagUntilTimeout>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e006      	b.n	8009e36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2220      	movs	r2, #32
 8009e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	e000      	b.n	8009e36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009e34:	2302      	movs	r3, #2
  }
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3720      	adds	r7, #32
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b084      	sub	sp, #16
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	60f8      	str	r0, [r7, #12]
 8009e46:	60b9      	str	r1, [r7, #8]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	d112      	bne.n	8009e7e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <HAL_UART_Receive_IT+0x26>
 8009e5e:	88fb      	ldrh	r3, [r7, #6]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e00b      	b.n	8009e80 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009e6e:	88fb      	ldrh	r3, [r7, #6]
 8009e70:	461a      	mov	r2, r3
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 fb0f 	bl	800a498 <UART_Start_Receive_IT>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	e000      	b.n	8009e80 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009e7e:	2302      	movs	r3, #2
  }
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ebe:	f003 030f 	and.w	r3, r3, #15
 8009ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10f      	bne.n	8009eee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ed2:	f003 0320 	and.w	r3, r3, #32
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d009      	beq.n	8009eee <HAL_UART_IRQHandler+0x66>
 8009eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ede:	f003 0320 	and.w	r3, r3, #32
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fbec 	bl	800a6c4 <UART_Receive_IT>
      return;
 8009eec:	e25b      	b.n	800a3a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 80de 	beq.w	800a0b4 <HAL_UART_IRQHandler+0x22c>
 8009ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d106      	bne.n	8009f12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80d1 	beq.w	800a0b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00b      	beq.n	8009f36 <HAL_UART_IRQHandler+0xae>
 8009f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d005      	beq.n	8009f36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f2e:	f043 0201 	orr.w	r2, r3, #1
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <HAL_UART_IRQHandler+0xd2>
 8009f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f46:	f003 0301 	and.w	r3, r3, #1
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f52:	f043 0202 	orr.w	r2, r3, #2
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00b      	beq.n	8009f7e <HAL_UART_IRQHandler+0xf6>
 8009f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d005      	beq.n	8009f7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f76:	f043 0204 	orr.w	r2, r3, #4
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f82:	f003 0308 	and.w	r3, r3, #8
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d011      	beq.n	8009fae <HAL_UART_IRQHandler+0x126>
 8009f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d105      	bne.n	8009fa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d005      	beq.n	8009fae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fa6:	f043 0208 	orr.w	r2, r3, #8
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 81f2 	beq.w	800a39c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fbc:	f003 0320 	and.w	r3, r3, #32
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d008      	beq.n	8009fd6 <HAL_UART_IRQHandler+0x14e>
 8009fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fc8:	f003 0320 	and.w	r3, r3, #32
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fb77 	bl	800a6c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bf14      	ite	ne
 8009fe4:	2301      	movne	r3, #1
 8009fe6:	2300      	moveq	r3, #0
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ff2:	f003 0308 	and.w	r3, r3, #8
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <HAL_UART_IRQHandler+0x17a>
 8009ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d04f      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fa81 	bl	800a50a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a012:	2b00      	cmp	r3, #0
 800a014:	d041      	beq.n	800a09a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3314      	adds	r3, #20
 800a01c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a020:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a024:	e853 3f00 	ldrex	r3, [r3]
 800a028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a02c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3314      	adds	r3, #20
 800a03e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a042:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a04e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a052:	e841 2300 	strex	r3, r2, [r1]
 800a056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a05a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1d9      	bne.n	800a016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d013      	beq.n	800a092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a06e:	4a7e      	ldr	r2, [pc, #504]	@ (800a268 <HAL_UART_IRQHandler+0x3e0>)
 800a070:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe fd4e 	bl	8008b18 <HAL_DMA_Abort_IT>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d016      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a08c:	4610      	mov	r0, r2
 800a08e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a090:	e00e      	b.n	800a0b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f993 	bl	800a3be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a098:	e00a      	b.n	800a0b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f98f 	bl	800a3be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a0:	e006      	b.n	800a0b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f98b 	bl	800a3be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a0ae:	e175      	b.n	800a39c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b0:	bf00      	nop
    return;
 800a0b2:	e173      	b.n	800a39c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	f040 814f 	bne.w	800a35c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a0be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0c2:	f003 0310 	and.w	r3, r3, #16
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 8148 	beq.w	800a35c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a0cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0d0:	f003 0310 	and.w	r3, r3, #16
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 8141 	beq.w	800a35c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60bb      	str	r3, [r7, #8]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	60bb      	str	r3, [r7, #8]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	60bb      	str	r3, [r7, #8]
 800a0ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 80b6 	beq.w	800a26c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a10c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a110:	2b00      	cmp	r3, #0
 800a112:	f000 8145 	beq.w	800a3a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a11a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a11e:	429a      	cmp	r2, r3
 800a120:	f080 813e 	bcs.w	800a3a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a12a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	2b20      	cmp	r3, #32
 800a134:	f000 8088 	beq.w	800a248 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	330c      	adds	r3, #12
 800a13e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a142:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a146:	e853 3f00 	ldrex	r3, [r3]
 800a14a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a14e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a152:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a156:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	330c      	adds	r3, #12
 800a160:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a164:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a168:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a170:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a17c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1d9      	bne.n	800a138 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3314      	adds	r3, #20
 800a18a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a18e:	e853 3f00 	ldrex	r3, [r3]
 800a192:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a194:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a196:	f023 0301 	bic.w	r3, r3, #1
 800a19a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3314      	adds	r3, #20
 800a1a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a1a8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a1ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a1ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e1      	bne.n	800a184 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3314      	adds	r3, #20
 800a1c6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1ca:	e853 3f00 	ldrex	r3, [r3]
 800a1ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a1d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	3314      	adds	r3, #20
 800a1e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a1e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a1e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a1ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a1ec:	e841 2300 	strex	r3, r2, [r1]
 800a1f0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a1f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e3      	bne.n	800a1c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	330c      	adds	r3, #12
 800a20c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a210:	e853 3f00 	ldrex	r3, [r3]
 800a214:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a218:	f023 0310 	bic.w	r3, r3, #16
 800a21c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	330c      	adds	r3, #12
 800a226:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a22a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a22c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a232:	e841 2300 	strex	r3, r2, [r1]
 800a236:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e3      	bne.n	800a206 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a242:	4618      	mov	r0, r3
 800a244:	f7fe fc2d 	bl	8008aa2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a256:	b29b      	uxth	r3, r3
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f8b6 	bl	800a3d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a264:	e09c      	b.n	800a3a0 <HAL_UART_IRQHandler+0x518>
 800a266:	bf00      	nop
 800a268:	0800a5cf 	.word	0x0800a5cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a274:	b29b      	uxth	r3, r3
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a280:	b29b      	uxth	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 808e 	beq.w	800a3a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8089 	beq.w	800a3a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	330c      	adds	r3, #12
 800a298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29c:	e853 3f00 	ldrex	r3, [r3]
 800a2a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	330c      	adds	r3, #12
 800a2b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a2b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a2b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2be:	e841 2300 	strex	r3, r2, [r1]
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1e3      	bne.n	800a292 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3314      	adds	r3, #20
 800a2d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d4:	e853 3f00 	ldrex	r3, [r3]
 800a2d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	f023 0301 	bic.w	r3, r3, #1
 800a2e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3314      	adds	r3, #20
 800a2ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a2ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2f6:	e841 2300 	strex	r3, r2, [r1]
 800a2fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1e3      	bne.n	800a2ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2220      	movs	r2, #32
 800a306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	330c      	adds	r3, #12
 800a316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	e853 3f00 	ldrex	r3, [r3]
 800a31e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f023 0310 	bic.w	r3, r3, #16
 800a326:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	330c      	adds	r3, #12
 800a330:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a334:	61fa      	str	r2, [r7, #28]
 800a336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	69b9      	ldr	r1, [r7, #24]
 800a33a:	69fa      	ldr	r2, [r7, #28]
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	617b      	str	r3, [r7, #20]
   return(result);
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e3      	bne.n	800a310 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a34e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f83b 	bl	800a3d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a35a:	e023      	b.n	800a3a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a35c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a364:	2b00      	cmp	r3, #0
 800a366:	d009      	beq.n	800a37c <HAL_UART_IRQHandler+0x4f4>
 800a368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a36c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f93e 	bl	800a5f6 <UART_Transmit_IT>
    return;
 800a37a:	e014      	b.n	800a3a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00e      	beq.n	800a3a6 <HAL_UART_IRQHandler+0x51e>
 800a388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a390:	2b00      	cmp	r3, #0
 800a392:	d008      	beq.n	800a3a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f97d 	bl	800a694 <UART_EndTransmit_IT>
    return;
 800a39a:	e004      	b.n	800a3a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800a39c:	bf00      	nop
 800a39e:	e002      	b.n	800a3a6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a3a0:	bf00      	nop
 800a3a2:	e000      	b.n	800a3a6 <HAL_UART_IRQHandler+0x51e>
      return;
 800a3a4:	bf00      	nop
  }
}
 800a3a6:	37e8      	adds	r7, #232	@ 0xe8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bc80      	pop	{r7}
 800a3bc:	4770      	bx	lr

0800a3be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a3c6:	bf00      	nop
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bc80      	pop	{r7}
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bc80      	pop	{r7}
 800a3e4:	4770      	bx	lr

0800a3e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b086      	sub	sp, #24
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	60b9      	str	r1, [r7, #8]
 800a3f0:	603b      	str	r3, [r7, #0]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3f6:	e03b      	b.n	800a470 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fe:	d037      	beq.n	800a470 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a400:	f7fe fa1e 	bl	8008840 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	6a3a      	ldr	r2, [r7, #32]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d302      	bcc.n	800a416 <UART_WaitOnFlagUntilTimeout+0x30>
 800a410:	6a3b      	ldr	r3, [r7, #32]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e03a      	b.n	800a490 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f003 0304 	and.w	r3, r3, #4
 800a424:	2b00      	cmp	r3, #0
 800a426:	d023      	beq.n	800a470 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	2b80      	cmp	r3, #128	@ 0x80
 800a42c:	d020      	beq.n	800a470 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b40      	cmp	r3, #64	@ 0x40
 800a432:	d01d      	beq.n	800a470 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0308 	and.w	r3, r3, #8
 800a43e:	2b08      	cmp	r3, #8
 800a440:	d116      	bne.n	800a470 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a442:	2300      	movs	r3, #0
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	617b      	str	r3, [r7, #20]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	617b      	str	r3, [r7, #20]
 800a456:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 f856 	bl	800a50a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2208      	movs	r2, #8
 800a462:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e00f      	b.n	800a490 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	4013      	ands	r3, r2
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	bf0c      	ite	eq
 800a480:	2301      	moveq	r3, #1
 800a482:	2300      	movne	r3, #0
 800a484:	b2db      	uxtb	r3, r3
 800a486:	461a      	mov	r2, r3
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d0b4      	beq.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	88fa      	ldrh	r2, [r7, #6]
 800a4b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	88fa      	ldrh	r2, [r7, #6]
 800a4b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2222      	movs	r2, #34	@ 0x22
 800a4c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d007      	beq.n	800a4de <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	695a      	ldr	r2, [r3, #20]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f042 0201 	orr.w	r2, r2, #1
 800a4ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68da      	ldr	r2, [r3, #12]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f042 0220 	orr.w	r2, r2, #32
 800a4fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	bc80      	pop	{r7}
 800a508:	4770      	bx	lr

0800a50a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b095      	sub	sp, #84	@ 0x54
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	330c      	adds	r3, #12
 800a518:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51c:	e853 3f00 	ldrex	r3, [r3]
 800a520:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	330c      	adds	r3, #12
 800a530:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a532:	643a      	str	r2, [r7, #64]	@ 0x40
 800a534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a536:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a53a:	e841 2300 	strex	r3, r2, [r1]
 800a53e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1e5      	bne.n	800a512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3314      	adds	r3, #20
 800a54c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	e853 3f00 	ldrex	r3, [r3]
 800a554:	61fb      	str	r3, [r7, #28]
   return(result);
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	f023 0301 	bic.w	r3, r3, #1
 800a55c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3314      	adds	r3, #20
 800a564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a568:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a56c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a56e:	e841 2300 	strex	r3, r2, [r1]
 800a572:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1e5      	bne.n	800a546 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d119      	bne.n	800a5b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	330c      	adds	r3, #12
 800a588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	e853 3f00 	ldrex	r3, [r3]
 800a590:	60bb      	str	r3, [r7, #8]
   return(result);
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f023 0310 	bic.w	r3, r3, #16
 800a598:	647b      	str	r3, [r7, #68]	@ 0x44
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	330c      	adds	r3, #12
 800a5a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5a2:	61ba      	str	r2, [r7, #24]
 800a5a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a6:	6979      	ldr	r1, [r7, #20]
 800a5a8:	69ba      	ldr	r2, [r7, #24]
 800a5aa:	e841 2300 	strex	r3, r2, [r1]
 800a5ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1e5      	bne.n	800a582 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a5c4:	bf00      	nop
 800a5c6:	3754      	adds	r7, #84	@ 0x54
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bc80      	pop	{r7}
 800a5cc:	4770      	bx	lr

0800a5ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f7ff fee8 	bl	800a3be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ee:	bf00      	nop
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b085      	sub	sp, #20
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b21      	cmp	r3, #33	@ 0x21
 800a608:	d13e      	bne.n	800a688 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a612:	d114      	bne.n	800a63e <UART_Transmit_IT+0x48>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d110      	bne.n	800a63e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a1b      	ldr	r3, [r3, #32]
 800a620:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a630:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	1c9a      	adds	r2, r3, #2
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	621a      	str	r2, [r3, #32]
 800a63c:	e008      	b.n	800a650 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	1c59      	adds	r1, r3, #1
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	6211      	str	r1, [r2, #32]
 800a648:	781a      	ldrb	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a654:	b29b      	uxth	r3, r3
 800a656:	3b01      	subs	r3, #1
 800a658:	b29b      	uxth	r3, r3
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	4619      	mov	r1, r3
 800a65e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10f      	bne.n	800a684 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68da      	ldr	r2, [r3, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a672:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a682:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	e000      	b.n	800a68a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a688:	2302      	movs	r3, #2
  }
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	bc80      	pop	{r7}
 800a692:	4770      	bx	lr

0800a694 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68da      	ldr	r2, [r3, #12]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff fe79 	bl	800a3ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b08c      	sub	sp, #48	@ 0x30
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b22      	cmp	r3, #34	@ 0x22
 800a6d6:	f040 80ae 	bne.w	800a836 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6e2:	d117      	bne.n	800a714 <UART_Receive_IT+0x50>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d113      	bne.n	800a714 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a702:	b29a      	uxth	r2, r3
 800a704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a706:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a70c:	1c9a      	adds	r2, r3, #2
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	629a      	str	r2, [r3, #40]	@ 0x28
 800a712:	e026      	b.n	800a762 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a718:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a71a:	2300      	movs	r3, #0
 800a71c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a726:	d007      	beq.n	800a738 <UART_Receive_IT+0x74>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <UART_Receive_IT+0x82>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d106      	bne.n	800a746 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a742:	701a      	strb	r2, [r3, #0]
 800a744:	e008      	b.n	800a758 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a752:	b2da      	uxtb	r2, r3
 800a754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a756:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75c:	1c5a      	adds	r2, r3, #1
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a766:	b29b      	uxth	r3, r3
 800a768:	3b01      	subs	r3, #1
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	4619      	mov	r1, r3
 800a770:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a772:	2b00      	cmp	r3, #0
 800a774:	d15d      	bne.n	800a832 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68da      	ldr	r2, [r3, #12]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f022 0220 	bic.w	r2, r2, #32
 800a784:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68da      	ldr	r2, [r3, #12]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a794:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	695a      	ldr	r2, [r3, #20]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f022 0201 	bic.w	r2, r2, #1
 800a7a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d135      	bne.n	800a828 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	330c      	adds	r3, #12
 800a7c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	e853 3f00 	ldrex	r3, [r3]
 800a7d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f023 0310 	bic.w	r3, r3, #16
 800a7d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	330c      	adds	r3, #12
 800a7e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7e2:	623a      	str	r2, [r7, #32]
 800a7e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e6:	69f9      	ldr	r1, [r7, #28]
 800a7e8:	6a3a      	ldr	r2, [r7, #32]
 800a7ea:	e841 2300 	strex	r3, r2, [r1]
 800a7ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1e5      	bne.n	800a7c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	2b10      	cmp	r3, #16
 800a802:	d10a      	bne.n	800a81a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	60fb      	str	r3, [r7, #12]
 800a818:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff fdd5 	bl	800a3d0 <HAL_UARTEx_RxEventCallback>
 800a826:	e002      	b.n	800a82e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7fd fdbf 	bl	80083ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	e002      	b.n	800a838 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	e000      	b.n	800a838 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a836:	2302      	movs	r3, #2
  }
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3730      	adds	r7, #48	@ 0x30
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	68da      	ldr	r2, [r3, #12]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689a      	ldr	r2, [r3, #8]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	431a      	orrs	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a87a:	f023 030c 	bic.w	r3, r3, #12
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	6812      	ldr	r2, [r2, #0]
 800a882:	68b9      	ldr	r1, [r7, #8]
 800a884:	430b      	orrs	r3, r1
 800a886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	699a      	ldr	r2, [r3, #24]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a2c      	ldr	r2, [pc, #176]	@ (800a954 <UART_SetConfig+0x114>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d103      	bne.n	800a8b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a8a8:	f7ff f9bc 	bl	8009c24 <HAL_RCC_GetPCLK2Freq>
 800a8ac:	60f8      	str	r0, [r7, #12]
 800a8ae:	e002      	b.n	800a8b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a8b0:	f7ff f9a4 	bl	8009bfc <HAL_RCC_GetPCLK1Freq>
 800a8b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	009a      	lsls	r2, r3, #2
 800a8c0:	441a      	add	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8cc:	4a22      	ldr	r2, [pc, #136]	@ (800a958 <UART_SetConfig+0x118>)
 800a8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d2:	095b      	lsrs	r3, r3, #5
 800a8d4:	0119      	lsls	r1, r3, #4
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	4613      	mov	r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	009a      	lsls	r2, r3, #2
 800a8e0:	441a      	add	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a8ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a958 <UART_SetConfig+0x118>)
 800a8ee:	fba3 0302 	umull	r0, r3, r3, r2
 800a8f2:	095b      	lsrs	r3, r3, #5
 800a8f4:	2064      	movs	r0, #100	@ 0x64
 800a8f6:	fb00 f303 	mul.w	r3, r0, r3
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	011b      	lsls	r3, r3, #4
 800a8fe:	3332      	adds	r3, #50	@ 0x32
 800a900:	4a15      	ldr	r2, [pc, #84]	@ (800a958 <UART_SetConfig+0x118>)
 800a902:	fba2 2303 	umull	r2, r3, r2, r3
 800a906:	095b      	lsrs	r3, r3, #5
 800a908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a90c:	4419      	add	r1, r3
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	009a      	lsls	r2, r3, #2
 800a918:	441a      	add	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	fbb2 f2f3 	udiv	r2, r2, r3
 800a924:	4b0c      	ldr	r3, [pc, #48]	@ (800a958 <UART_SetConfig+0x118>)
 800a926:	fba3 0302 	umull	r0, r3, r3, r2
 800a92a:	095b      	lsrs	r3, r3, #5
 800a92c:	2064      	movs	r0, #100	@ 0x64
 800a92e:	fb00 f303 	mul.w	r3, r0, r3
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	3332      	adds	r3, #50	@ 0x32
 800a938:	4a07      	ldr	r2, [pc, #28]	@ (800a958 <UART_SetConfig+0x118>)
 800a93a:	fba2 2303 	umull	r2, r3, r2, r3
 800a93e:	095b      	lsrs	r3, r3, #5
 800a940:	f003 020f 	and.w	r2, r3, #15
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	440a      	add	r2, r1
 800a94a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a94c:	bf00      	nop
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	40013800 	.word	0x40013800
 800a958:	51eb851f 	.word	0x51eb851f

0800a95c <memset>:
 800a95c:	4603      	mov	r3, r0
 800a95e:	4402      	add	r2, r0
 800a960:	4293      	cmp	r3, r2
 800a962:	d100      	bne.n	800a966 <memset+0xa>
 800a964:	4770      	bx	lr
 800a966:	f803 1b01 	strb.w	r1, [r3], #1
 800a96a:	e7f9      	b.n	800a960 <memset+0x4>

0800a96c <__libc_init_array>:
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	2600      	movs	r6, #0
 800a970:	4d0c      	ldr	r5, [pc, #48]	@ (800a9a4 <__libc_init_array+0x38>)
 800a972:	4c0d      	ldr	r4, [pc, #52]	@ (800a9a8 <__libc_init_array+0x3c>)
 800a974:	1b64      	subs	r4, r4, r5
 800a976:	10a4      	asrs	r4, r4, #2
 800a978:	42a6      	cmp	r6, r4
 800a97a:	d109      	bne.n	800a990 <__libc_init_array+0x24>
 800a97c:	f000 f81a 	bl	800a9b4 <_init>
 800a980:	2600      	movs	r6, #0
 800a982:	4d0a      	ldr	r5, [pc, #40]	@ (800a9ac <__libc_init_array+0x40>)
 800a984:	4c0a      	ldr	r4, [pc, #40]	@ (800a9b0 <__libc_init_array+0x44>)
 800a986:	1b64      	subs	r4, r4, r5
 800a988:	10a4      	asrs	r4, r4, #2
 800a98a:	42a6      	cmp	r6, r4
 800a98c:	d105      	bne.n	800a99a <__libc_init_array+0x2e>
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	f855 3b04 	ldr.w	r3, [r5], #4
 800a994:	4798      	blx	r3
 800a996:	3601      	adds	r6, #1
 800a998:	e7ee      	b.n	800a978 <__libc_init_array+0xc>
 800a99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a99e:	4798      	blx	r3
 800a9a0:	3601      	adds	r6, #1
 800a9a2:	e7f2      	b.n	800a98a <__libc_init_array+0x1e>
 800a9a4:	0800aa00 	.word	0x0800aa00
 800a9a8:	0800aa00 	.word	0x0800aa00
 800a9ac:	0800aa00 	.word	0x0800aa00
 800a9b0:	0800aa04 	.word	0x0800aa04

0800a9b4 <_init>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	bf00      	nop
 800a9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ba:	bc08      	pop	{r3}
 800a9bc:	469e      	mov	lr, r3
 800a9be:	4770      	bx	lr

0800a9c0 <_fini>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	bf00      	nop
 800a9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c6:	bc08      	pop	{r3}
 800a9c8:	469e      	mov	lr, r3
 800a9ca:	4770      	bx	lr
